{
  "language": "Solidity",
  "sources": {
    "@gnosis.pm/safe-contracts/contracts/base/Executor.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport \"../common/Enum.sol\";\n\n/// @title Executor - A contract that can execute transactions\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract Executor {\n    function execute(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 txGas\n    ) internal returns (bool success) {\n        if (operation == Enum.Operation.DelegateCall) {\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\n            }\n        } else {\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\n            }\n        }\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/base/FallbackManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"../common/SelfAuthorized.sol\";\n\n/// @title Fallback Manager - A contract that manages fallback calls made to this contract\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract FallbackManager is SelfAuthorized {\n    event ChangedFallbackHandler(address handler);\n\n    // keccak256(\"fallback_manager.handler.address\")\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\n\n    function internalSetFallbackHandler(address handler) internal {\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, handler)\n        }\n    }\n\n    /// @dev Allows to add a contract to handle fallback calls.\n    ///      Only fallback calls without value and with data will be forwarded.\n    ///      This can only be done via a Safe transaction.\n    /// @param handler contract to handle fallbacks calls.\n    function setFallbackHandler(address handler) public authorized {\n        internalSetFallbackHandler(handler);\n        emit ChangedFallbackHandler(handler);\n    }\n\n    // solhint-disable-next-line payable-fallback,no-complex-fallback\n    fallback() external {\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let handler := sload(slot)\n            if iszero(handler) {\n                return(0, 0)\n            }\n            calldatacopy(0, 0, calldatasize())\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\n            // Then the address without padding is stored right after the calldata\n            mstore(calldatasize(), shl(96, caller()))\n            // Add 20 bytes for the address appended add the end\n            let success := call(gas(), handler, 0, 0, add(calldatasize(), 20), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            if iszero(success) {\n                revert(0, returndatasize())\n            }\n            return(0, returndatasize())\n        }\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/base/GuardManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"../common/Enum.sol\";\nimport \"../common/SelfAuthorized.sol\";\n\ninterface Guard {\n    function checkTransaction(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures,\n        address msgSender\n    ) external;\n\n    function checkAfterExecution(bytes32 txHash, bool success) external;\n}\n\n/// @title Fallback Manager - A contract that manages fallback calls made to this contract\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract GuardManager is SelfAuthorized {\n    event ChangedGuard(address guard);\n    // keccak256(\"guard_manager.guard.address\")\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\n\n    /// @dev Set a guard that checks transactions before execution\n    /// @param guard The address of the guard to be used or the 0 address to disable the guard\n    function setGuard(address guard) external authorized {\n        bytes32 slot = GUARD_STORAGE_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, guard)\n        }\n        emit ChangedGuard(guard);\n    }\n\n    function getGuard() internal view returns (address guard) {\n        bytes32 slot = GUARD_STORAGE_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            guard := sload(slot)\n        }\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/base/ModuleManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport \"../common/Enum.sol\";\nimport \"../common/SelfAuthorized.sol\";\nimport \"./Executor.sol\";\n\n/// @title Module Manager - A contract that manages modules that can execute transactions via this contract\n/// @author Stefan George - <stefan@gnosis.pm>\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract ModuleManager is SelfAuthorized, Executor {\n    event EnabledModule(address module);\n    event DisabledModule(address module);\n    event ExecutionFromModuleSuccess(address indexed module);\n    event ExecutionFromModuleFailure(address indexed module);\n\n    address internal constant SENTINEL_MODULES = address(0x1);\n\n    mapping(address => address) internal modules;\n\n    function setupModules(address to, bytes memory data) internal {\n        require(modules[SENTINEL_MODULES] == address(0), \"GS100\");\n        modules[SENTINEL_MODULES] = SENTINEL_MODULES;\n        if (to != address(0))\n            // Setup has to complete successfully or transaction fails.\n            require(execute(to, 0, data, Enum.Operation.DelegateCall, gasleft()), \"GS000\");\n    }\n\n    /// @dev Allows to add a module to the whitelist.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Enables the module `module` for the Safe.\n    /// @param module Module to be whitelisted.\n    function enableModule(address module) public authorized {\n        // Module address cannot be null or sentinel.\n        require(module != address(0) && module != SENTINEL_MODULES, \"GS101\");\n        // Module cannot be added twice.\n        require(modules[module] == address(0), \"GS102\");\n        modules[module] = modules[SENTINEL_MODULES];\n        modules[SENTINEL_MODULES] = module;\n        emit EnabledModule(module);\n    }\n\n    /// @dev Allows to remove a module from the whitelist.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Disables the module `module` for the Safe.\n    /// @param prevModule Module that pointed to the module to be removed in the linked list\n    /// @param module Module to be removed.\n    function disableModule(address prevModule, address module) public authorized {\n        // Validate module address and check that it corresponds to module index.\n        require(module != address(0) && module != SENTINEL_MODULES, \"GS101\");\n        require(modules[prevModule] == module, \"GS103\");\n        modules[prevModule] = modules[module];\n        modules[module] = address(0);\n        emit DisabledModule(module);\n    }\n\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\n    /// @param to Destination address of module transaction.\n    /// @param value Ether value of module transaction.\n    /// @param data Data payload of module transaction.\n    /// @param operation Operation type of module transaction.\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) public virtual returns (bool success) {\n        // Only whitelisted modules are allowed.\n        require(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0), \"GS104\");\n        // Execute transaction without further confirmations.\n        success = execute(to, value, data, operation, gasleft());\n        if (success) emit ExecutionFromModuleSuccess(msg.sender);\n        else emit ExecutionFromModuleFailure(msg.sender);\n    }\n\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations and return data\n    /// @param to Destination address of module transaction.\n    /// @param value Ether value of module transaction.\n    /// @param data Data payload of module transaction.\n    /// @param operation Operation type of module transaction.\n    function execTransactionFromModuleReturnData(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) public returns (bool success, bytes memory returnData) {\n        success = execTransactionFromModule(to, value, data, operation);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Load free memory location\n            let ptr := mload(0x40)\n            // We allocate memory for the return data by setting the free memory location to\n            // current free memory location + data size + 32 bytes for data size value\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\n            // Store the size\n            mstore(ptr, returndatasize())\n            // Store the data\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\n            // Point the return data to the correct memory location\n            returnData := ptr\n        }\n    }\n\n    /// @dev Returns if an module is enabled\n    /// @return True if the module is enabled\n    function isModuleEnabled(address module) public view returns (bool) {\n        return SENTINEL_MODULES != module && modules[module] != address(0);\n    }\n\n    /// @dev Returns array of modules.\n    /// @param start Start of the page.\n    /// @param pageSize Maximum number of modules that should be returned.\n    /// @return array Array of modules.\n    /// @return next Start of the next page.\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next) {\n        // Init array with max page size\n        array = new address[](pageSize);\n\n        // Populate return array\n        uint256 moduleCount = 0;\n        address currentModule = modules[start];\n        while (currentModule != address(0x0) && currentModule != SENTINEL_MODULES && moduleCount < pageSize) {\n            array[moduleCount] = currentModule;\n            currentModule = modules[currentModule];\n            moduleCount++;\n        }\n        next = currentModule;\n        // Set correct size of returned array\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            mstore(array, moduleCount)\n        }\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport \"../common/SelfAuthorized.sol\";\n\n/// @title OwnerManager - Manages a set of owners and a threshold to perform actions.\n/// @author Stefan George - <stefan@gnosis.pm>\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract OwnerManager is SelfAuthorized {\n    event AddedOwner(address owner);\n    event RemovedOwner(address owner);\n    event ChangedThreshold(uint256 threshold);\n\n    address internal constant SENTINEL_OWNERS = address(0x1);\n\n    mapping(address => address) internal owners;\n    uint256 internal ownerCount;\n    uint256 internal threshold;\n\n    /// @dev Setup function sets initial storage of contract.\n    /// @param _owners List of Safe owners.\n    /// @param _threshold Number of required confirmations for a Safe transaction.\n    function setupOwners(address[] memory _owners, uint256 _threshold) internal {\n        // Threshold can only be 0 at initialization.\n        // Check ensures that setup function can only be called once.\n        require(threshold == 0, \"GS200\");\n        // Validate that threshold is smaller than number of added owners.\n        require(_threshold <= _owners.length, \"GS201\");\n        // There has to be at least one Safe owner.\n        require(_threshold >= 1, \"GS202\");\n        // Initializing Safe owners.\n        address currentOwner = SENTINEL_OWNERS;\n        for (uint256 i = 0; i < _owners.length; i++) {\n            // Owner address cannot be null.\n            address owner = _owners[i];\n            require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this) && currentOwner != owner, \"GS203\");\n            // No duplicate owners allowed.\n            require(owners[owner] == address(0), \"GS204\");\n            owners[currentOwner] = owner;\n            currentOwner = owner;\n        }\n        owners[currentOwner] = SENTINEL_OWNERS;\n        ownerCount = _owners.length;\n        threshold = _threshold;\n    }\n\n    /// @dev Allows to add a new owner to the Safe and update the threshold at the same time.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\n    /// @param owner New owner address.\n    /// @param _threshold New threshold.\n    function addOwnerWithThreshold(address owner, uint256 _threshold) public authorized {\n        // Owner address cannot be null, the sentinel or the Safe itself.\n        require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this), \"GS203\");\n        // No duplicate owners allowed.\n        require(owners[owner] == address(0), \"GS204\");\n        owners[owner] = owners[SENTINEL_OWNERS];\n        owners[SENTINEL_OWNERS] = owner;\n        ownerCount++;\n        emit AddedOwner(owner);\n        // Change threshold if threshold was changed.\n        if (threshold != _threshold) changeThreshold(_threshold);\n    }\n\n    /// @dev Allows to remove an owner from the Safe and update the threshold at the same time.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\n    /// @param prevOwner Owner that pointed to the owner to be removed in the linked list\n    /// @param owner Owner address to be removed.\n    /// @param _threshold New threshold.\n    function removeOwner(\n        address prevOwner,\n        address owner,\n        uint256 _threshold\n    ) public authorized {\n        // Only allow to remove an owner, if threshold can still be reached.\n        require(ownerCount - 1 >= _threshold, \"GS201\");\n        // Validate owner address and check that it corresponds to owner index.\n        require(owner != address(0) && owner != SENTINEL_OWNERS, \"GS203\");\n        require(owners[prevOwner] == owner, \"GS205\");\n        owners[prevOwner] = owners[owner];\n        owners[owner] = address(0);\n        ownerCount--;\n        emit RemovedOwner(owner);\n        // Change threshold if threshold was changed.\n        if (threshold != _threshold) changeThreshold(_threshold);\n    }\n\n    /// @dev Allows to swap/replace an owner from the Safe with another address.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\n    /// @param prevOwner Owner that pointed to the owner to be replaced in the linked list\n    /// @param oldOwner Owner address to be replaced.\n    /// @param newOwner New owner address.\n    function swapOwner(\n        address prevOwner,\n        address oldOwner,\n        address newOwner\n    ) public authorized {\n        // Owner address cannot be null, the sentinel or the Safe itself.\n        require(newOwner != address(0) && newOwner != SENTINEL_OWNERS && newOwner != address(this), \"GS203\");\n        // No duplicate owners allowed.\n        require(owners[newOwner] == address(0), \"GS204\");\n        // Validate oldOwner address and check that it corresponds to owner index.\n        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, \"GS203\");\n        require(owners[prevOwner] == oldOwner, \"GS205\");\n        owners[newOwner] = owners[oldOwner];\n        owners[prevOwner] = newOwner;\n        owners[oldOwner] = address(0);\n        emit RemovedOwner(oldOwner);\n        emit AddedOwner(newOwner);\n    }\n\n    /// @dev Allows to update the number of required confirmations by Safe owners.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Changes the threshold of the Safe to `_threshold`.\n    /// @param _threshold New threshold.\n    function changeThreshold(uint256 _threshold) public authorized {\n        // Validate that threshold is smaller than number of owners.\n        require(_threshold <= ownerCount, \"GS201\");\n        // There has to be at least one Safe owner.\n        require(_threshold >= 1, \"GS202\");\n        threshold = _threshold;\n        emit ChangedThreshold(threshold);\n    }\n\n    function getThreshold() public view returns (uint256) {\n        return threshold;\n    }\n\n    function isOwner(address owner) public view returns (bool) {\n        return owner != SENTINEL_OWNERS && owners[owner] != address(0);\n    }\n\n    /// @dev Returns array of owners.\n    /// @return Array of Safe owners.\n    function getOwners() public view returns (address[] memory) {\n        address[] memory array = new address[](ownerCount);\n\n        // populate return array\n        uint256 index = 0;\n        address currentOwner = owners[SENTINEL_OWNERS];\n        while (currentOwner != SENTINEL_OWNERS) {\n            array[index] = currentOwner;\n            currentOwner = owners[currentOwner];\n            index++;\n        }\n        return array;\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/common/Enum.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title Enum - Collection of enums\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract Enum {\n    enum Operation {Call, DelegateCall}\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/common/EtherPaymentFallback.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title EtherPaymentFallback - A contract that has a fallback to accept ether payments\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract EtherPaymentFallback {\n    event SafeReceived(address indexed sender, uint256 value);\n\n    /// @dev Fallback function accepts Ether transactions.\n    receive() external payable {\n        emit SafeReceived(msg.sender, msg.value);\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/common/SecuredTokenTransfer.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title SecuredTokenTransfer - Secure token transfer\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract SecuredTokenTransfer {\n    /// @dev Transfers a token and returns if it was a success\n    /// @param token Token that should be transferred\n    /// @param receiver Receiver to whom the token should be transferred\n    /// @param amount The amount of tokens that should be transferred\n    function transferToken(\n        address token,\n        address receiver,\n        uint256 amount\n    ) internal returns (bool transferred) {\n        // 0xa9059cbb - keccack(\"transfer(address,uint256)\")\n        bytes memory data = abi.encodeWithSelector(0xa9059cbb, receiver, amount);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We write the return value to scratch space.\n            // See https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory\n            let success := call(sub(gas(), 10000), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            switch returndatasize()\n                case 0 {\n                    transferred := success\n                }\n                case 0x20 {\n                    transferred := iszero(or(iszero(success), iszero(mload(0))))\n                }\n                default {\n                    transferred := 0\n                }\n        }\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/common/SelfAuthorized.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title SelfAuthorized - authorizes current contract to perform actions\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract SelfAuthorized {\n    function requireSelfCall() private view {\n        require(msg.sender == address(this), \"GS031\");\n    }\n\n    modifier authorized() {\n        // This is a function call as it minimized the bytecode size\n        requireSelfCall();\n        _;\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/common/SignatureDecoder.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title SignatureDecoder - Decodes signatures that a encoded as bytes\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract SignatureDecoder {\n    /// @dev divides bytes signature into `uint8 v, bytes32 r, bytes32 s`.\n    /// @notice Make sure to peform a bounds check for @param pos, to avoid out of bounds access on @param signatures\n    /// @param pos which signature to read. A prior bounds check of this parameter should be performed, to avoid out of bounds access\n    /// @param signatures concatenated rsv signatures\n    function signatureSplit(bytes memory signatures, uint256 pos)\n        internal\n        pure\n        returns (\n            uint8 v,\n            bytes32 r,\n            bytes32 s\n        )\n    {\n        // The signature format is a compact form of:\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n        // Compact means, uint8 is not padded to 32 bytes.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let signaturePos := mul(0x41, pos)\n            r := mload(add(signatures, add(signaturePos, 0x20)))\n            s := mload(add(signatures, add(signaturePos, 0x40)))\n            // Here we are loading the last 32 bytes, including 31 bytes\n            // of 's'. There is no 'mload8' to do this.\n            //\n            // 'byte' is not working due to the Solidity parser, so lets\n            // use the second best option, 'and'\n            v := and(mload(add(signatures, add(signaturePos, 0x41))), 0xff)\n        }\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/common/Singleton.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title Singleton - Base for singleton contracts (should always be first super contract)\n///         This contract is tightly coupled to our proxy contract (see `proxies/GnosisSafeProxy.sol`)\n/// @author Richard Meissner - <richard@gnosis.io>\ncontract Singleton {\n    // singleton always needs to be first declared variable, to ensure that it is at the same location as in the Proxy contract.\n    // It should also always be ensured that the address is stored alone (uses a full word)\n    address private singleton;\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/common/StorageAccessible.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title StorageAccessible - generic base contract that allows callers to access all internal storage.\n/// @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\ncontract StorageAccessible {\n    /**\n     * @dev Reads `length` bytes of storage in the currents contract\n     * @param offset - the offset in the current contract's storage in words to start reading from\n     * @param length - the number of words (32 bytes) of data to read\n     * @return the bytes that were read.\n     */\n    function getStorageAt(uint256 offset, uint256 length) public view returns (bytes memory) {\n        bytes memory result = new bytes(length * 32);\n        for (uint256 index = 0; index < length; index++) {\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                let word := sload(add(offset, index))\n                mstore(add(add(result, 0x20), mul(index, 0x20)), word)\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Performs a delegetecall on a targetContract in the context of self.\n     * Internally reverts execution to avoid side effects (making it static).\n     *\n     * This method reverts with data equal to `abi.encode(bool(success), bytes(response))`.\n     * Specifically, the `returndata` after a call to this method will be:\n     * `success:bool || response.length:uint256 || response:bytes`.\n     *\n     * @param targetContract Address of the contract containing the code to execute.\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\n     */\n    function simulateAndRevert(address targetContract, bytes memory calldataPayload) external {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let success := delegatecall(gas(), targetContract, add(calldataPayload, 0x20), mload(calldataPayload), 0, 0)\n\n            mstore(0x00, success)\n            mstore(0x20, returndatasize())\n            returndatacopy(0x40, 0, returndatasize())\n            revert(0, add(returndatasize(), 0x40))\n        }\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title GnosisSafeStorage - Storage layout of the Safe contracts to be used in libraries\n/// @author Richard Meissner - <richard@gnosis.io>\ncontract GnosisSafeStorage {\n    // From /common/Singleton.sol\n    address internal singleton;\n    // From /common/ModuleManager.sol\n    mapping(address => address) internal modules;\n    // From /common/OwnerManager.sol\n    mapping(address => address) internal owners;\n    uint256 internal ownerCount;\n    uint256 internal threshold;\n\n    // From /GnosisSafe.sol\n    bytes32 internal nonce;\n    bytes32 internal domainSeparator;\n    mapping(bytes32 => uint256) internal signedMessages;\n    mapping(address => mapping(bytes32 => uint256)) internal approvedHashes;\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/external/GnosisSafeMath.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title GnosisSafeMath\n * @dev Math operations with safety checks that revert on error\n * Renamed from SafeMath to GnosisSafeMath to avoid conflicts\n * TODO: remove once open zeppelin update to solc 0.5.0\n */\nlibrary GnosisSafeMath {\n    /**\n     * @dev Multiplies two numbers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two numbers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"./base/ModuleManager.sol\";\nimport \"./base/OwnerManager.sol\";\nimport \"./base/FallbackManager.sol\";\nimport \"./base/GuardManager.sol\";\nimport \"./common/EtherPaymentFallback.sol\";\nimport \"./common/Singleton.sol\";\nimport \"./common/SignatureDecoder.sol\";\nimport \"./common/SecuredTokenTransfer.sol\";\nimport \"./common/StorageAccessible.sol\";\nimport \"./interfaces/ISignatureValidator.sol\";\nimport \"./external/GnosisSafeMath.sol\";\n\n/// @title Gnosis Safe - A multisignature wallet with support for confirmations using signed messages based on ERC191.\n/// @author Stefan George - <stefan@gnosis.io>\n/// @author Richard Meissner - <richard@gnosis.io>\ncontract GnosisSafe is\n    EtherPaymentFallback,\n    Singleton,\n    ModuleManager,\n    OwnerManager,\n    SignatureDecoder,\n    SecuredTokenTransfer,\n    ISignatureValidatorConstants,\n    FallbackManager,\n    StorageAccessible,\n    GuardManager\n{\n    using GnosisSafeMath for uint256;\n\n    string public constant VERSION = \"1.3.0\";\n\n    // keccak256(\n    //     \"EIP712Domain(uint256 chainId,address verifyingContract)\"\n    // );\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\n\n    // keccak256(\n    //     \"SafeTx(address to,uint256 value,bytes data,uint8 operation,uint256 safeTxGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 nonce)\"\n    // );\n    bytes32 private constant SAFE_TX_TYPEHASH = 0xbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d8;\n\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\n    event SignMsg(bytes32 indexed msgHash);\n    event ExecutionFailure(bytes32 txHash, uint256 payment);\n    event ExecutionSuccess(bytes32 txHash, uint256 payment);\n\n    uint256 public nonce;\n    bytes32 private _deprecatedDomainSeparator;\n    // Mapping to keep track of all message hashes that have been approve by ALL REQUIRED owners\n    mapping(bytes32 => uint256) public signedMessages;\n    // Mapping to keep track of all hashes (message or transaction) that have been approve by ANY owners\n    mapping(address => mapping(bytes32 => uint256)) public approvedHashes;\n\n    // This constructor ensures that this contract can only be used as a master copy for Proxy contracts\n    constructor() {\n        // By setting the threshold it is not possible to call setup anymore,\n        // so we create a Safe with 0 owners and threshold 1.\n        // This is an unusable Safe, perfect for the singleton\n        threshold = 1;\n    }\n\n    /// @dev Setup function sets initial storage of contract.\n    /// @param _owners List of Safe owners.\n    /// @param _threshold Number of required confirmations for a Safe transaction.\n    /// @param to Contract address for optional delegate call.\n    /// @param data Data payload for optional delegate call.\n    /// @param fallbackHandler Handler for fallback calls to this contract\n    /// @param paymentToken Token that should be used for the payment (0 is ETH)\n    /// @param payment Value that should be paid\n    /// @param paymentReceiver Adddress that should receive the payment (or 0 if tx.origin)\n    function setup(\n        address[] calldata _owners,\n        uint256 _threshold,\n        address to,\n        bytes calldata data,\n        address fallbackHandler,\n        address paymentToken,\n        uint256 payment,\n        address payable paymentReceiver\n    ) external {\n        // setupOwners checks if the Threshold is already set, therefore preventing that this method is called twice\n        setupOwners(_owners, _threshold);\n        if (fallbackHandler != address(0)) internalSetFallbackHandler(fallbackHandler);\n        // As setupOwners can only be called if the contract has not been initialized we don't need a check for setupModules\n        setupModules(to, data);\n\n        if (payment > 0) {\n            // To avoid running into issues with EIP-170 we reuse the handlePayment function (to avoid adjusting code of that has been verified we do not adjust the method itself)\n            // baseGas = 0, gasPrice = 1 and gas = payment => amount = (payment + 0) * 1 = payment\n            handlePayment(payment, 0, 1, paymentToken, paymentReceiver);\n        }\n        emit SafeSetup(msg.sender, _owners, _threshold, to, fallbackHandler);\n    }\n\n    /// @dev Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.\n    ///      Note: The fees are always transferred, even if the user transaction fails.\n    /// @param to Destination address of Safe transaction.\n    /// @param value Ether value of Safe transaction.\n    /// @param data Data payload of Safe transaction.\n    /// @param operation Operation type of Safe transaction.\n    /// @param safeTxGas Gas that should be used for the Safe transaction.\n    /// @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\n    /// @param gasPrice Gas price that should be used for the payment calculation.\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n    /// @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})\n    function execTransaction(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures\n    ) public payable virtual returns (bool success) {\n        bytes32 txHash;\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\n        {\n            bytes memory txHashData =\n                encodeTransactionData(\n                    // Transaction info\n                    to,\n                    value,\n                    data,\n                    operation,\n                    safeTxGas,\n                    // Payment info\n                    baseGas,\n                    gasPrice,\n                    gasToken,\n                    refundReceiver,\n                    // Signature info\n                    nonce\n                );\n            // Increase nonce and execute transaction.\n            nonce++;\n            txHash = keccak256(txHashData);\n            checkSignatures(txHash, txHashData, signatures);\n        }\n        address guard = getGuard();\n        {\n            if (guard != address(0)) {\n                Guard(guard).checkTransaction(\n                    // Transaction info\n                    to,\n                    value,\n                    data,\n                    operation,\n                    safeTxGas,\n                    // Payment info\n                    baseGas,\n                    gasPrice,\n                    gasToken,\n                    refundReceiver,\n                    // Signature info\n                    signatures,\n                    msg.sender\n                );\n            }\n        }\n        // We require some gas to emit the events (at least 2500) after the execution and some to perform code until the execution (500)\n        // We also include the 1/64 in the check that is not send along with a call to counteract potential shortings because of EIP-150\n        require(gasleft() >= ((safeTxGas * 64) / 63).max(safeTxGas + 2500) + 500, \"GS010\");\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\n        {\n            uint256 gasUsed = gasleft();\n            // If the gasPrice is 0 we assume that nearly all available gas can be used (it is always more than safeTxGas)\n            // We only substract 2500 (compared to the 3000 before) to ensure that the amount passed is still higher than safeTxGas\n            success = execute(to, value, data, operation, gasPrice == 0 ? (gasleft() - 2500) : safeTxGas);\n            gasUsed = gasUsed.sub(gasleft());\n            // If no safeTxGas and no gasPrice was set (e.g. both are 0), then the internal tx is required to be successful\n            // This makes it possible to use `estimateGas` without issues, as it searches for the minimum gas where the tx doesn't revert\n            require(success || safeTxGas != 0 || gasPrice != 0, \"GS013\");\n            // We transfer the calculated tx costs to the tx.origin to avoid sending it to intermediate contracts that have made calls\n            uint256 payment = 0;\n            if (gasPrice > 0) {\n                payment = handlePayment(gasUsed, baseGas, gasPrice, gasToken, refundReceiver);\n            }\n            if (success) emit ExecutionSuccess(txHash, payment);\n            else emit ExecutionFailure(txHash, payment);\n        }\n        {\n            if (guard != address(0)) {\n                Guard(guard).checkAfterExecution(txHash, success);\n            }\n        }\n    }\n\n    function handlePayment(\n        uint256 gasUsed,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver\n    ) private returns (uint256 payment) {\n        // solhint-disable-next-line avoid-tx-origin\n        address payable receiver = refundReceiver == address(0) ? payable(tx.origin) : refundReceiver;\n        if (gasToken == address(0)) {\n            // For ETH we will only adjust the gas price to not be higher than the actual used gas price\n            payment = gasUsed.add(baseGas).mul(gasPrice < tx.gasprice ? gasPrice : tx.gasprice);\n            require(receiver.send(payment), \"GS011\");\n        } else {\n            payment = gasUsed.add(baseGas).mul(gasPrice);\n            require(transferToken(gasToken, receiver, payment), \"GS012\");\n        }\n    }\n\n    /**\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\n     * @param data That should be signed (this is passed to an external validator contract)\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\n     */\n    function checkSignatures(\n        bytes32 dataHash,\n        bytes memory data,\n        bytes memory signatures\n    ) public view {\n        // Load threshold to avoid multiple storage loads\n        uint256 _threshold = threshold;\n        // Check that a threshold is set\n        require(_threshold > 0, \"GS001\");\n        checkNSignatures(dataHash, data, signatures, _threshold);\n    }\n\n    /**\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\n     * @param data That should be signed (this is passed to an external validator contract)\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\n     * @param requiredSignatures Amount of required valid signatures.\n     */\n    function checkNSignatures(\n        bytes32 dataHash,\n        bytes memory data,\n        bytes memory signatures,\n        uint256 requiredSignatures\n    ) public view {\n        // Check that the provided signature data is not too short\n        require(signatures.length >= requiredSignatures.mul(65), \"GS020\");\n        // There cannot be an owner with address 0.\n        address lastOwner = address(0);\n        address currentOwner;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        uint256 i;\n        for (i = 0; i < requiredSignatures; i++) {\n            (v, r, s) = signatureSplit(signatures, i);\n            if (v == 0) {\n                // If v is 0 then it is a contract signature\n                // When handling contract signatures the address of the contract is encoded into r\n                currentOwner = address(uint160(uint256(r)));\n\n                // Check that signature data pointer (s) is not pointing inside the static part of the signatures bytes\n                // This check is not completely accurate, since it is possible that more signatures than the threshold are send.\n                // Here we only check that the pointer is not pointing inside the part that is being processed\n                require(uint256(s) >= requiredSignatures.mul(65), \"GS021\");\n\n                // Check that signature data pointer (s) is in bounds (points to the length of data -> 32 bytes)\n                require(uint256(s).add(32) <= signatures.length, \"GS022\");\n\n                // Check if the contract signature is in bounds: start of data is s + 32 and end is start + signature length\n                uint256 contractSignatureLen;\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    contractSignatureLen := mload(add(add(signatures, s), 0x20))\n                }\n                require(uint256(s).add(32).add(contractSignatureLen) <= signatures.length, \"GS023\");\n\n                // Check signature\n                bytes memory contractSignature;\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\n                    contractSignature := add(add(signatures, s), 0x20)\n                }\n                require(ISignatureValidator(currentOwner).isValidSignature(data, contractSignature) == EIP1271_MAGIC_VALUE, \"GS024\");\n            } else if (v == 1) {\n                // If v is 1 then it is an approved hash\n                // When handling approved hashes the address of the approver is encoded into r\n                currentOwner = address(uint160(uint256(r)));\n                // Hashes are automatically approved by the sender of the message or when they have been pre-approved via a separate transaction\n                require(msg.sender == currentOwner || approvedHashes[currentOwner][dataHash] != 0, \"GS025\");\n            } else if (v > 30) {\n                // If v > 30 then default va (27,28) has been adjusted for eth_sign flow\n                // To support eth_sign and similar we adjust v and hash the messageHash with the Ethereum message prefix before applying ecrecover\n                currentOwner = ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", dataHash)), v - 4, r, s);\n            } else {\n                // Default is the ecrecover flow with the provided data hash\n                // Use ecrecover with the messageHash for EOA signatures\n                currentOwner = ecrecover(dataHash, v, r, s);\n            }\n            require(currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS, \"GS026\");\n            lastOwner = currentOwner;\n        }\n    }\n\n    /// @dev Allows to estimate a Safe transaction.\n    ///      This method is only meant for estimation purpose, therefore the call will always revert and encode the result in the revert data.\n    ///      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`\n    /// @param to Destination address of Safe transaction.\n    /// @param value Ether value of Safe transaction.\n    /// @param data Data payload of Safe transaction.\n    /// @param operation Operation type of Safe transaction.\n    /// @return Estimate without refunds and overhead fees (base transaction and payload data gas costs).\n    /// @notice Deprecated in favor of common/StorageAccessible.sol and will be removed in next version.\n    function requiredTxGas(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation\n    ) external returns (uint256) {\n        uint256 startGas = gasleft();\n        // We don't provide an error message here, as we use it to return the estimate\n        require(execute(to, value, data, operation, gasleft()));\n        uint256 requiredGas = startGas - gasleft();\n        // Convert response to string and return via error message\n        revert(string(abi.encodePacked(requiredGas)));\n    }\n\n    /**\n     * @dev Marks a hash as approved. This can be used to validate a hash that is used by a signature.\n     * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.\n     */\n    function approveHash(bytes32 hashToApprove) external {\n        require(owners[msg.sender] != address(0), \"GS030\");\n        approvedHashes[msg.sender][hashToApprove] = 1;\n        emit ApproveHash(hashToApprove, msg.sender);\n    }\n\n    /// @dev Returns the chain id used by this contract.\n    function getChainId() public view returns (uint256) {\n        uint256 id;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            id := chainid()\n        }\n        return id;\n    }\n\n    function domainSeparator() public view returns (bytes32) {\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, getChainId(), this));\n    }\n\n    /// @dev Returns the bytes that are hashed to be signed by owners.\n    /// @param to Destination address.\n    /// @param value Ether value.\n    /// @param data Data payload.\n    /// @param operation Operation type.\n    /// @param safeTxGas Gas that should be used for the safe transaction.\n    /// @param baseGas Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\n    /// @param gasPrice Maximum gas price that should be used for this transaction.\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n    /// @param _nonce Transaction nonce.\n    /// @return Transaction hash bytes.\n    function encodeTransactionData(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    ) public view returns (bytes memory) {\n        bytes32 safeTxHash =\n            keccak256(\n                abi.encode(\n                    SAFE_TX_TYPEHASH,\n                    to,\n                    value,\n                    keccak256(data),\n                    operation,\n                    safeTxGas,\n                    baseGas,\n                    gasPrice,\n                    gasToken,\n                    refundReceiver,\n                    _nonce\n                )\n            );\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator(), safeTxHash);\n    }\n\n    /// @dev Returns hash to be signed by owners.\n    /// @param to Destination address.\n    /// @param value Ether value.\n    /// @param data Data payload.\n    /// @param operation Operation type.\n    /// @param safeTxGas Fas that should be used for the safe transaction.\n    /// @param baseGas Gas costs for data used to trigger the safe transaction.\n    /// @param gasPrice Maximum gas price that should be used for this transaction.\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n    /// @param _nonce Transaction nonce.\n    /// @return Transaction hash.\n    function getTransactionHash(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    ) public view returns (bytes32) {\n        return keccak256(encodeTransactionData(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce));\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/handler/DefaultCallbackHandler.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"../interfaces/ERC1155TokenReceiver.sol\";\nimport \"../interfaces/ERC721TokenReceiver.sol\";\nimport \"../interfaces/ERC777TokensRecipient.sol\";\nimport \"../interfaces/IERC165.sol\";\n\n/// @title Default Callback Handler - returns true for known token callbacks\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract DefaultCallbackHandler is ERC1155TokenReceiver, ERC777TokensRecipient, ERC721TokenReceiver, IERC165 {\n    string public constant NAME = \"Default Callback Handler\";\n    string public constant VERSION = \"1.0.0\";\n\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return 0xf23a6e61;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] calldata,\n        uint256[] calldata,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return 0xbc197c81;\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return 0x150b7a02;\n    }\n\n    function tokensReceived(\n        address,\n        address,\n        address,\n        uint256,\n        bytes calldata,\n        bytes calldata\n    ) external pure override {\n        // We implement this for completeness, doesn't really have any value\n    }\n\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\n        return\n            interfaceId == type(ERC1155TokenReceiver).interfaceId ||\n            interfaceId == type(ERC721TokenReceiver).interfaceId ||\n            interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/interfaces/ERC1155TokenReceiver.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n    Note: The ERC-165 identifier for this interface is 0x4e2312e0.\n*/\ninterface ERC1155TokenReceiver {\n    /**\n        @notice Handle the receipt of a single ERC1155 token type.\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.        \n        This function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\n        This function MUST revert if it rejects the transfer.\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n        @param _operator  The address which initiated the transfer (i.e. msg.sender)\n        @param _from      The address which previously owned the token\n        @param _id        The ID of the token being transferred\n        @param _value     The amount of tokens being transferred\n        @param _data      Additional data with no specified format\n        @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n    */\n    function onERC1155Received(\n        address _operator,\n        address _from,\n        uint256 _id,\n        uint256 _value,\n        bytes calldata _data\n    ) external returns (bytes4);\n\n    /**\n        @notice Handle the receipt of multiple ERC1155 token types.\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.        \n        This function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\n        This function MUST revert if it rejects the transfer(s).\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n        @param _operator  The address which initiated the batch transfer (i.e. msg.sender)\n        @param _from      The address which previously owned the token\n        @param _ids       An array containing ids of each token being transferred (order and length must match _values array)\n        @param _values    An array containing amounts of each token being transferred (order and length must match _ids array)\n        @param _data      Additional data with no specified format\n        @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n    */\n    function onERC1155BatchReceived(\n        address _operator,\n        address _from,\n        uint256[] calldata _ids,\n        uint256[] calldata _values,\n        bytes calldata _data\n    ) external returns (bytes4);\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/interfaces/ERC721TokenReceiver.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\ninterface ERC721TokenReceiver {\n    /// @notice Handle the receipt of an NFT\n    /// @dev The ERC721 smart contract calls this function on the recipient\n    ///  after a `transfer`. This function MAY throw to revert and reject the\n    ///  transfer. Return of other than the magic value MUST result in the\n    ///  transaction being reverted.\n    ///  Note: the contract address is always the message sender.\n    /// @param _operator The address which called `safeTransferFrom` function\n    /// @param _from The address which previously owned the token\n    /// @param _tokenId The NFT identifier which is being transferred\n    /// @param _data Additional data with no specified format\n    /// @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    ///  unless throwing\n    function onERC721Received(\n        address _operator,\n        address _from,\n        uint256 _tokenId,\n        bytes calldata _data\n    ) external returns (bytes4);\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/interfaces/ERC777TokensRecipient.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\ninterface ERC777TokensRecipient {\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\ncontract ISignatureValidatorConstants {\n    // bytes4(keccak256(\"isValidSignature(bytes,bytes)\")\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x20c13b0b;\n}\n\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param _data Arbitrary length data signed on the behalf of address(this)\n     * @param _signature Signature byte array associated with _data\n     *\n     * MUST return the bytes4 magic value 0x20c13b0b when function passes.\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n     * MUST allow external calls\n     */\n    function isValidSignature(bytes memory _data, bytes memory _signature) public view virtual returns (bytes4);\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title IProxy - Helper interface to access masterCopy of the Proxy on-chain\n/// @author Richard Meissner - <richard@gnosis.io>\ninterface IProxy {\n    function masterCopy() external view returns (address);\n}\n\n/// @title GnosisSafeProxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\n/// @author Stefan George - <stefan@gnosis.io>\n/// @author Richard Meissner - <richard@gnosis.io>\ncontract GnosisSafeProxy {\n    // singleton always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\n    address internal singleton;\n\n    /// @dev Constructor function sets address of singleton contract.\n    /// @param _singleton Singleton address.\n    constructor(address _singleton) {\n        require(_singleton != address(0), \"Invalid singleton address provided\");\n        singleton = _singleton;\n    }\n\n    /// @dev Fallback function forwards all transactions and returns all received return data.\n    fallback() external payable {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let _singleton := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\n                mstore(0, _singleton)\n                return(0, 0x20)\n            }\n            calldatacopy(0, 0, calldatasize())\n            let success := delegatecall(gas(), _singleton, 0, calldatasize(), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            if eq(success, 0) {\n                revert(0, returndatasize())\n            }\n            return(0, returndatasize())\n        }\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxyFactory.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"./GnosisSafeProxy.sol\";\nimport \"./IProxyCreationCallback.sol\";\n\n/// @title Proxy Factory - Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n/// @author Stefan George - <stefan@gnosis.pm>\ncontract GnosisSafeProxyFactory {\n    event ProxyCreation(GnosisSafeProxy proxy, address singleton);\n\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n    /// @param singleton Address of singleton contract.\n    /// @param data Payload for message call sent to new proxy contract.\n    function createProxy(address singleton, bytes memory data) public returns (GnosisSafeProxy proxy) {\n        proxy = new GnosisSafeProxy(singleton);\n        if (data.length > 0)\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                if eq(call(gas(), proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) {\n                    revert(0, 0)\n                }\n            }\n        emit ProxyCreation(proxy, singleton);\n    }\n\n    /// @dev Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.\n    function proxyRuntimeCode() public pure returns (bytes memory) {\n        return type(GnosisSafeProxy).runtimeCode;\n    }\n\n    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\n    function proxyCreationCode() public pure returns (bytes memory) {\n        return type(GnosisSafeProxy).creationCode;\n    }\n\n    /// @dev Allows to create new proxy contact using CREATE2 but it doesn't run the initializer.\n    ///      This method is only meant as an utility to be called from other methods\n    /// @param _singleton Address of singleton contract.\n    /// @param initializer Payload for message call sent to new proxy contract.\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\n    function deployProxyWithNonce(\n        address _singleton,\n        bytes memory initializer,\n        uint256 saltNonce\n    ) internal returns (GnosisSafeProxy proxy) {\n        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatinating it\n        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce));\n        bytes memory deploymentData = abi.encodePacked(type(GnosisSafeProxy).creationCode, uint256(uint160(_singleton)));\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            proxy := create2(0x0, add(0x20, deploymentData), mload(deploymentData), salt)\n        }\n        require(address(proxy) != address(0), \"Create2 call failed\");\n    }\n\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n    /// @param _singleton Address of singleton contract.\n    /// @param initializer Payload for message call sent to new proxy contract.\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\n    function createProxyWithNonce(\n        address _singleton,\n        bytes memory initializer,\n        uint256 saltNonce\n    ) public returns (GnosisSafeProxy proxy) {\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\n        if (initializer.length > 0)\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                if eq(call(gas(), proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) {\n                    revert(0, 0)\n                }\n            }\n        emit ProxyCreation(proxy, _singleton);\n    }\n\n    /// @dev Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction\n    /// @param _singleton Address of singleton contract.\n    /// @param initializer Payload for message call sent to new proxy contract.\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\n    /// @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.\n    function createProxyWithCallback(\n        address _singleton,\n        bytes memory initializer,\n        uint256 saltNonce,\n        IProxyCreationCallback callback\n    ) public returns (GnosisSafeProxy proxy) {\n        uint256 saltNonceWithCallback = uint256(keccak256(abi.encodePacked(saltNonce, callback)));\n        proxy = createProxyWithNonce(_singleton, initializer, saltNonceWithCallback);\n        if (address(callback) != address(0)) callback.proxyCreated(proxy, _singleton, initializer, saltNonce);\n    }\n\n    /// @dev Allows to get the address for a new proxy contact created via `createProxyWithNonce`\n    ///      This method is only meant for address calculation purpose when you use an initializer that would revert,\n    ///      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.\n    /// @param _singleton Address of singleton contract.\n    /// @param initializer Payload for message call sent to new proxy contract.\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\n    function calculateCreateProxyWithNonceAddress(\n        address _singleton,\n        bytes calldata initializer,\n        uint256 saltNonce\n    ) external returns (GnosisSafeProxy proxy) {\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\n        revert(string(abi.encodePacked(proxy)));\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/proxies/IProxyCreationCallback.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport \"./GnosisSafeProxy.sol\";\n\ninterface IProxyCreationCallback {\n    function proxyCreated(\n        GnosisSafeProxy proxy,\n        address _singleton,\n        bytes calldata initializer,\n        uint256 saltNonce\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Recipient.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\n *\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\n * contract implement this interface (contract holders can be their own\n * implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Recipient {\n    /**\n     * @dev Called by an {IERC777} token contract whenever tokens are being\n     * moved or created into a registered account (`to`). The type of operation\n     * is conveyed by `from` being the zero address or not.\n     *\n     * This call occurs _after_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Create2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Create2.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(\n        uint256 amount,\n        bytes32 salt,\n        bytes memory bytecode\n    ) internal returns (address addr) {\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(\n        bytes32 salt,\n        bytes32 bytecodeHash,\n        address deployer\n    ) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := keccak256(start, 85)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/core/BaseAccount.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\n/* solhint-disable avoid-low-level-calls */\r\n/* solhint-disable no-empty-blocks */\r\n\r\nimport \"../interfaces/IAccount.sol\";\r\nimport \"../interfaces/IEntryPoint.sol\";\r\nimport \"./Helpers.sol\";\r\n\r\n/**\r\n * Basic account implementation.\r\n * this contract provides the basic logic for implementing the IAccount interface  - validateUserOp\r\n * specific account implementation should inherit it and provide the account-specific logic\r\n */\r\nabstract contract BaseAccount is IAccount {\r\n    using UserOperationLib for UserOperation;\r\n\r\n    //return value in case of signature failure, with no time-range.\r\n    // equivalent to _packValidationData(true,0,0);\r\n    uint256 constant internal SIG_VALIDATION_FAILED = 1;\r\n\r\n    /**\r\n     * Return the account nonce.\r\n     * This method returns the next sequential nonce.\r\n     * For a nonce of a specific key, use `entrypoint.getNonce(account, key)`\r\n     */\r\n    function getNonce() public view virtual returns (uint256) {\r\n        return entryPoint().getNonce(address(this), 0);\r\n    }\r\n\r\n    /**\r\n     * return the entryPoint used by this account.\r\n     * subclass should return the current entryPoint used by this account.\r\n     */\r\n    function entryPoint() public view virtual returns (IEntryPoint);\r\n\r\n    /**\r\n     * Validate user's signature and nonce.\r\n     * subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\r\n     */\r\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\r\n    external override virtual returns (uint256 validationData) {\r\n        _requireFromEntryPoint();\r\n        validationData = _validateSignature(userOp, userOpHash);\r\n        _validateNonce(userOp.nonce);\r\n        _payPrefund(missingAccountFunds);\r\n    }\r\n\r\n    /**\r\n     * ensure the request comes from the known entrypoint.\r\n     */\r\n    function _requireFromEntryPoint() internal virtual view {\r\n        require(msg.sender == address(entryPoint()), \"account: not from EntryPoint\");\r\n    }\r\n\r\n    /**\r\n     * validate the signature is valid for this message.\r\n     * @param userOp validate the userOp.signature field\r\n     * @param userOpHash convenient field: the hash of the request, to check the signature against\r\n     *          (also hashes the entrypoint and chain id)\r\n     * @return validationData signature and time-range of this operation\r\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\r\n     *         otherwise, an address of an \"authorizer\" contract.\r\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\r\n     *      <6-byte> validAfter - first timestamp this operation is valid\r\n     *      If the account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\r\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\r\n     */\r\n    function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash)\r\n    internal virtual returns (uint256 validationData);\r\n\r\n    /**\r\n     * Validate the nonce of the UserOperation.\r\n     * This method may validate the nonce requirement of this account.\r\n     * e.g.\r\n     * To limit the nonce to use sequenced UserOps only (no \"out of order\" UserOps):\r\n     *      `require(nonce < type(uint64).max)`\r\n     * For a hypothetical account that *requires* the nonce to be out-of-order:\r\n     *      `require(nonce & type(uint64).max == 0)`\r\n     *\r\n     * The actual nonce uniqueness is managed by the EntryPoint, and thus no other\r\n     * action is needed by the account itself.\r\n     *\r\n     * @param nonce to validate\r\n     *\r\n     * solhint-disable-next-line no-empty-blocks\r\n     */\r\n    function _validateNonce(uint256 nonce) internal view virtual {\r\n    }\r\n\r\n    /**\r\n     * sends to the entrypoint (msg.sender) the missing funds for this transaction.\r\n     * subclass MAY override this method for better funds management\r\n     * (e.g. send to the entryPoint more than the minimum required, so that in future transactions\r\n     * it will not be required to send again)\r\n     * @param missingAccountFunds the minimum value this method should send the entrypoint.\r\n     *  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\r\n     */\r\n    function _payPrefund(uint256 missingAccountFunds) internal virtual {\r\n        if (missingAccountFunds != 0) {\r\n            (bool success,) = payable(msg.sender).call{value : missingAccountFunds, gas : type(uint256).max}(\"\");\r\n            (success);\r\n            //ignore failure (its EntryPoint's job to verify, not account.)\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/core/BasePaymaster.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\n\r\n/* solhint-disable reason-string */\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../interfaces/IPaymaster.sol\";\r\nimport \"../interfaces/IEntryPoint.sol\";\r\nimport \"./Helpers.sol\";\r\n\r\n/**\r\n * Helper class for creating a paymaster.\r\n * provides helper methods for staking.\r\n * validates that the postOp is called only by the entryPoint\r\n */\r\nabstract contract BasePaymaster is IPaymaster, Ownable {\r\n\r\n    IEntryPoint immutable public entryPoint;\r\n\r\n    constructor(IEntryPoint _entryPoint) {\r\n        entryPoint = _entryPoint;\r\n    }\r\n\r\n    /// @inheritdoc IPaymaster\r\n    function validatePaymasterUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 maxCost)\r\n    external override returns (bytes memory context, uint256 validationData) {\r\n         _requireFromEntryPoint();\r\n        return _validatePaymasterUserOp(userOp, userOpHash, maxCost);\r\n    }\r\n\r\n    function _validatePaymasterUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 maxCost)\r\n    internal virtual returns (bytes memory context, uint256 validationData);\r\n\r\n    /// @inheritdoc IPaymaster\r\n    function postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) external override {\r\n        _requireFromEntryPoint();\r\n        _postOp(mode, context, actualGasCost);\r\n    }\r\n\r\n    /**\r\n     * post-operation handler.\r\n     * (verified to be called only through the entryPoint)\r\n     * @dev if subclass returns a non-empty context from validatePaymasterUserOp, it must also implement this method.\r\n     * @param mode enum with the following options:\r\n     *      opSucceeded - user operation succeeded.\r\n     *      opReverted  - user op reverted. still has to pay for gas.\r\n     *      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.\r\n     *                       Now this is the 2nd call, after user's op was deliberately reverted.\r\n     * @param context - the context value returned by validatePaymasterUserOp\r\n     * @param actualGasCost - actual gas used so far (without this postOp call).\r\n     */\r\n    function _postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) internal virtual {\r\n\r\n        (mode,context,actualGasCost); // unused params\r\n        // subclass must override this method if validatePaymasterUserOp returns a context\r\n        revert(\"must override\");\r\n    }\r\n\r\n    /**\r\n     * add a deposit for this paymaster, used for paying for transaction fees\r\n     */\r\n    function deposit() public payable {\r\n        entryPoint.depositTo{value : msg.value}(address(this));\r\n    }\r\n\r\n    /**\r\n     * withdraw value from the deposit\r\n     * @param withdrawAddress target to send to\r\n     * @param amount to withdraw\r\n     */\r\n    function withdrawTo(address payable withdrawAddress, uint256 amount) public onlyOwner {\r\n        entryPoint.withdrawTo(withdrawAddress, amount);\r\n    }\r\n    /**\r\n     * add stake for this paymaster.\r\n     * This method can also carry eth value to add to the current stake.\r\n     * @param unstakeDelaySec - the unstake delay for this paymaster. Can only be increased.\r\n     */\r\n    function addStake(uint32 unstakeDelaySec) external payable onlyOwner {\r\n        entryPoint.addStake{value : msg.value}(unstakeDelaySec);\r\n    }\r\n\r\n    /**\r\n     * return current paymaster's deposit on the entryPoint.\r\n     */\r\n    function getDeposit() public view returns (uint256) {\r\n        return entryPoint.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * unlock the stake, in order to withdraw it.\r\n     * The paymaster can't serve requests once unlocked, until it calls addStake again\r\n     */\r\n    function unlockStake() external onlyOwner {\r\n        entryPoint.unlockStake();\r\n    }\r\n\r\n    /**\r\n     * withdraw the entire paymaster's stake.\r\n     * stake must be unlocked first (and then wait for the unstakeDelay to be over)\r\n     * @param withdrawAddress the address to send withdrawn value.\r\n     */\r\n    function withdrawStake(address payable withdrawAddress) external onlyOwner {\r\n        entryPoint.withdrawStake(withdrawAddress);\r\n    }\r\n\r\n    /// validate the call is made from a valid entrypoint\r\n    function _requireFromEntryPoint() internal virtual {\r\n        require(msg.sender == address(entryPoint), \"Sender not EntryPoint\");\r\n    }\r\n}\r\n"
    },
    "contracts/core/EntryPoint.sol": {
      "content": "/**\r\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\r\n ** Only one instance required on each chain.\r\n **/\r\n// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\n/* solhint-disable avoid-low-level-calls */\r\n/* solhint-disable no-inline-assembly */\r\n\r\nimport \"../interfaces/IAccount.sol\";\r\nimport \"../interfaces/IPaymaster.sol\";\r\nimport \"../interfaces/IEntryPoint.sol\";\r\n\r\nimport \"../utils/Exec.sol\";\r\nimport \"./StakeManager.sol\";\r\nimport \"./SenderCreator.sol\";\r\nimport \"./Helpers.sol\";\r\nimport \"./NonceManager.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\ncontract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard {\r\n\r\n    using UserOperationLib for UserOperation;\r\n\r\n    SenderCreator private immutable senderCreator = new SenderCreator();\r\n\r\n    // internal value used during simulation: need to query aggregator.\r\n    address private constant SIMULATE_FIND_AGGREGATOR = address(1);\r\n\r\n    // marker for inner call revert on out of gas\r\n    bytes32 private constant INNER_OUT_OF_GAS = hex'deaddead';\r\n\r\n    uint256 private constant REVERT_REASON_MAX_LEN = 2048;\r\n\r\n    /**\r\n     * for simulation purposes, validateUserOp (and validatePaymasterUserOp) must return this value\r\n     * in case of signature failure, instead of revert.\r\n     */\r\n    uint256 public constant SIG_VALIDATION_FAILED = 1;\r\n\r\n    /**\r\n     * compensate the caller's beneficiary address with the collected fees of all UserOperations.\r\n     * @param beneficiary the address to receive the fees\r\n     * @param amount amount to transfer.\r\n     */\r\n    function _compensate(address payable beneficiary, uint256 amount) internal {\r\n        require(beneficiary != address(0), \"AA90 invalid beneficiary\");\r\n        (bool success,) = beneficiary.call{value : amount}(\"\");\r\n        require(success, \"AA91 failed send to beneficiary\");\r\n    }\r\n\r\n    /**\r\n     * execute a user op\r\n     * @param opIndex index into the opInfo array\r\n     * @param userOp the userOp to execute\r\n     * @param opInfo the opInfo filled by validatePrepayment for this userOp.\r\n     * @return collected the total amount this userOp paid.\r\n     */\r\n    function _executeUserOp(uint256 opIndex, UserOperation calldata userOp, UserOpInfo memory opInfo) private returns (uint256 collected) {\r\n        uint256 preGas = gasleft();\r\n        bytes memory context = getMemoryBytesFromOffset(opInfo.contextOffset);\r\n\r\n        try this.innerHandleOp(userOp.callData, opInfo, context) returns (uint256 _actualGasCost) {\r\n            collected = _actualGasCost;\r\n        } catch {\r\n            bytes32 innerRevertCode;\r\n            assembly {\r\n                returndatacopy(0, 0, 32)\r\n                innerRevertCode := mload(0)\r\n            }\r\n            // handleOps was called with gas limit too low. abort entire bundle.\r\n            if (innerRevertCode == INNER_OUT_OF_GAS) {\r\n                //report paymaster, since if it is not deliberately caused by the bundler,\r\n                // it must be a revert caused by paymaster.\r\n                revert FailedOp(opIndex, \"AA95 out of gas\");\r\n            }\r\n\r\n            uint256 actualGas = preGas - gasleft() + opInfo.preOpGas;\r\n            collected = _handlePostOp(opIndex, IPaymaster.PostOpMode.postOpReverted, opInfo, context, actualGas);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute a batch of UserOperations.\r\n     * no signature aggregator is used.\r\n     * if any account requires an aggregator (that is, it returned an aggregator when\r\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\r\n     * @param ops the operations to execute\r\n     * @param beneficiary the address to receive the fees\r\n     */\r\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) public nonReentrant {\r\n\r\n        uint256 opslen = ops.length;\r\n        UserOpInfo[] memory opInfos = new UserOpInfo[](opslen);\r\n\r\n    unchecked {\r\n        for (uint256 i = 0; i < opslen; i++) {\r\n            UserOpInfo memory opInfo = opInfos[i];\r\n            (uint256 validationData, uint256 pmValidationData) = _validatePrepayment(i, ops[i], opInfo);\r\n            _validateAccountAndPaymasterValidationData(i, validationData, pmValidationData, address(0));\r\n        }\r\n\r\n        uint256 collected = 0;\r\n        emit BeforeExecution();\r\n\r\n        for (uint256 i = 0; i < opslen; i++) {\r\n            collected += _executeUserOp(i, ops[i], opInfos[i]);\r\n        }\r\n\r\n        _compensate(beneficiary, collected);\r\n    } //unchecked\r\n    }\r\n\r\n    /**\r\n     * Execute a batch of UserOperation with Aggregators\r\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\r\n     * @param beneficiary the address to receive the fees\r\n     */\r\n    function handleAggregatedOps(\r\n        UserOpsPerAggregator[] calldata opsPerAggregator,\r\n        address payable beneficiary\r\n    ) public nonReentrant {\r\n\r\n        uint256 opasLen = opsPerAggregator.length;\r\n        uint256 totalOps = 0;\r\n        for (uint256 i = 0; i < opasLen; i++) {\r\n            UserOpsPerAggregator calldata opa = opsPerAggregator[i];\r\n            UserOperation[] calldata ops = opa.userOps;\r\n            IAggregator aggregator = opa.aggregator;\r\n\r\n            //address(1) is special marker of \"signature error\"\r\n            require(address(aggregator) != address(1), \"AA96 invalid aggregator\");\r\n\r\n            if (address(aggregator) != address(0)) {\r\n                // solhint-disable-next-line no-empty-blocks\r\n                try aggregator.validateSignatures(ops, opa.signature) {}\r\n                catch {\r\n                    revert SignatureValidationFailed(address(aggregator));\r\n                }\r\n            }\r\n\r\n            totalOps += ops.length;\r\n        }\r\n\r\n        UserOpInfo[] memory opInfos = new UserOpInfo[](totalOps);\r\n\r\n        emit BeforeExecution();\r\n\r\n        uint256 opIndex = 0;\r\n        for (uint256 a = 0; a < opasLen; a++) {\r\n            UserOpsPerAggregator calldata opa = opsPerAggregator[a];\r\n            UserOperation[] calldata ops = opa.userOps;\r\n            IAggregator aggregator = opa.aggregator;\r\n\r\n            uint256 opslen = ops.length;\r\n            for (uint256 i = 0; i < opslen; i++) {\r\n                UserOpInfo memory opInfo = opInfos[opIndex];\r\n                (uint256 validationData, uint256 paymasterValidationData) = _validatePrepayment(opIndex, ops[i], opInfo);\r\n                _validateAccountAndPaymasterValidationData(i, validationData, paymasterValidationData, address(aggregator));\r\n                opIndex++;\r\n            }\r\n        }\r\n\r\n        uint256 collected = 0;\r\n        opIndex = 0;\r\n        for (uint256 a = 0; a < opasLen; a++) {\r\n            UserOpsPerAggregator calldata opa = opsPerAggregator[a];\r\n            emit SignatureAggregatorChanged(address(opa.aggregator));\r\n            UserOperation[] calldata ops = opa.userOps;\r\n            uint256 opslen = ops.length;\r\n\r\n            for (uint256 i = 0; i < opslen; i++) {\r\n                collected += _executeUserOp(opIndex, ops[i], opInfos[opIndex]);\r\n                opIndex++;\r\n            }\r\n        }\r\n        emit SignatureAggregatorChanged(address(0));\r\n\r\n        _compensate(beneficiary, collected);\r\n    }\r\n\r\n    /// @inheritdoc IEntryPoint\r\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external override {\r\n\r\n        UserOpInfo memory opInfo;\r\n        _simulationOnlyValidations(op);\r\n        (uint256 validationData, uint256 paymasterValidationData) = _validatePrepayment(0, op, opInfo);\r\n        ValidationData memory data = _intersectTimeRange(validationData, paymasterValidationData);\r\n\r\n        numberMarker();\r\n        uint256 paid = _executeUserOp(0, op, opInfo);\r\n        numberMarker();\r\n        bool targetSuccess;\r\n        bytes memory targetResult;\r\n        if (target != address(0)) {\r\n            (targetSuccess, targetResult) = target.call(targetCallData);\r\n        }\r\n        revert ExecutionResult(opInfo.preOpGas, paid, data.validAfter, data.validUntil, targetSuccess, targetResult);\r\n    }\r\n\r\n\r\n    // A memory copy of UserOp static fields only.\r\n    // Excluding: callData, initCode and signature. Replacing paymasterAndData with paymaster.\r\n    struct MemoryUserOp {\r\n        address sender;\r\n        uint256 nonce;\r\n        uint256 callGasLimit;\r\n        uint256 verificationGasLimit;\r\n        uint256 preVerificationGas;\r\n        address paymaster;\r\n        uint256 maxFeePerGas;\r\n        uint256 maxPriorityFeePerGas;\r\n    }\r\n\r\n    struct UserOpInfo {\r\n        MemoryUserOp mUserOp;\r\n        bytes32 userOpHash;\r\n        uint256 prefund;\r\n        uint256 contextOffset;\r\n        uint256 preOpGas;\r\n    }\r\n\r\n    /**\r\n     * inner function to handle a UserOperation.\r\n     * Must be declared \"external\" to open a call context, but it can only be called by handleOps.\r\n     */\r\n    function innerHandleOp(bytes memory callData, UserOpInfo memory opInfo, bytes calldata context) external returns (uint256 actualGasCost) {\r\n        uint256 preGas = gasleft();\r\n        require(msg.sender == address(this), \"AA92 internal call only\");\r\n        MemoryUserOp memory mUserOp = opInfo.mUserOp;\r\n\r\n        uint callGasLimit = mUserOp.callGasLimit;\r\n    unchecked {\r\n        // handleOps was called with gas limit too low. abort entire bundle.\r\n        if (gasleft() < callGasLimit + mUserOp.verificationGasLimit + 5000) {\r\n            assembly {\r\n                mstore(0, INNER_OUT_OF_GAS)\r\n                revert(0, 32)\r\n            }\r\n        }\r\n    }\r\n\r\n        IPaymaster.PostOpMode mode = IPaymaster.PostOpMode.opSucceeded;\r\n        if (callData.length > 0) {\r\n            bool success = Exec.call(mUserOp.sender, 0, callData, callGasLimit);\r\n            if (!success) {\r\n                bytes memory result = Exec.getReturnData(REVERT_REASON_MAX_LEN);\r\n                if (result.length > 0) {\r\n                    emit UserOperationRevertReason(opInfo.userOpHash, mUserOp.sender, mUserOp.nonce, result);\r\n                }\r\n                mode = IPaymaster.PostOpMode.opReverted;\r\n            }\r\n        }\r\n\r\n    unchecked {\r\n        uint256 actualGas = preGas - gasleft() + opInfo.preOpGas;\r\n        //note: opIndex is ignored (relevant only if mode==postOpReverted, which is only possible outside of innerHandleOp)\r\n        return _handlePostOp(0, mode, opInfo, context, actualGas);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * generate a request Id - unique identifier for this request.\r\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\r\n     */\r\n    function getUserOpHash(UserOperation calldata userOp) public view returns (bytes32) {\r\n        return keccak256(abi.encode(userOp.hash(), address(this), block.chainid));\r\n    }\r\n\r\n    /**\r\n     * copy general fields from userOp into the memory opInfo structure.\r\n     */\r\n    function _copyUserOpToMemory(UserOperation calldata userOp, MemoryUserOp memory mUserOp) internal pure {\r\n        mUserOp.sender = userOp.sender;\r\n        mUserOp.nonce = userOp.nonce;\r\n        mUserOp.callGasLimit = userOp.callGasLimit;\r\n        mUserOp.verificationGasLimit = userOp.verificationGasLimit;\r\n        mUserOp.preVerificationGas = userOp.preVerificationGas;\r\n        mUserOp.maxFeePerGas = userOp.maxFeePerGas;\r\n        mUserOp.maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\r\n        bytes calldata paymasterAndData = userOp.paymasterAndData;\r\n        if (paymasterAndData.length > 0) {\r\n            require(paymasterAndData.length >= 20, \"AA93 invalid paymasterAndData\");\r\n            mUserOp.paymaster = address(bytes20(paymasterAndData[: 20]));\r\n        } else {\r\n            mUserOp.paymaster = address(0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\r\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\r\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\r\n     * @param userOp the user operation to validate.\r\n     */\r\n    function simulateValidation(UserOperation calldata userOp) external {\r\n        UserOpInfo memory outOpInfo;\r\n\r\n        _simulationOnlyValidations(userOp);\r\n        (uint256 validationData, uint256 paymasterValidationData) = _validatePrepayment(0, userOp, outOpInfo);\r\n        StakeInfo memory paymasterInfo = _getStakeInfo(outOpInfo.mUserOp.paymaster);\r\n        StakeInfo memory senderInfo = _getStakeInfo(outOpInfo.mUserOp.sender);\r\n        StakeInfo memory factoryInfo;\r\n        {\r\n            bytes calldata initCode = userOp.initCode;\r\n            address factory = initCode.length >= 20 ? address(bytes20(initCode[0 : 20])) : address(0);\r\n            factoryInfo = _getStakeInfo(factory);\r\n        }\r\n\r\n        ValidationData memory data = _intersectTimeRange(validationData, paymasterValidationData);\r\n        address aggregator = data.aggregator;\r\n        bool sigFailed = aggregator == address(1);\r\n        ReturnInfo memory returnInfo = ReturnInfo(outOpInfo.preOpGas, outOpInfo.prefund,\r\n            sigFailed, data.validAfter, data.validUntil, getMemoryBytesFromOffset(outOpInfo.contextOffset));\r\n\r\n        if (aggregator != address(0) && aggregator != address(1)) {\r\n            AggregatorStakeInfo memory aggregatorInfo = AggregatorStakeInfo(aggregator, _getStakeInfo(aggregator));\r\n            revert ValidationResultWithAggregation(returnInfo, senderInfo, factoryInfo, paymasterInfo, aggregatorInfo);\r\n        }\r\n        revert ValidationResult(returnInfo, senderInfo, factoryInfo, paymasterInfo);\r\n\r\n    }\r\n\r\n    function _getRequiredPrefund(MemoryUserOp memory mUserOp) internal pure returns (uint256 requiredPrefund) {\r\n    unchecked {\r\n        //when using a Paymaster, the verificationGasLimit is used also to as a limit for the postOp call.\r\n        // our security model might call postOp eventually twice\r\n        uint256 mul = mUserOp.paymaster != address(0) ? 3 : 1;\r\n        uint256 requiredGas = mUserOp.callGasLimit + mUserOp.verificationGasLimit * mul + mUserOp.preVerificationGas;\r\n\r\n        requiredPrefund = requiredGas * mUserOp.maxFeePerGas;\r\n    }\r\n    }\r\n\r\n    // create the sender's contract if needed.\r\n    function _createSenderIfNeeded(uint256 opIndex, UserOpInfo memory opInfo, bytes calldata initCode) internal {\r\n        if (initCode.length != 0) {\r\n            address sender = opInfo.mUserOp.sender;\r\n            if (sender.code.length != 0) revert FailedOp(opIndex, \"AA10 sender already constructed\");\r\n            address sender1 = senderCreator.createSender{gas : opInfo.mUserOp.verificationGasLimit}(initCode);\r\n            if (sender1 == address(0)) revert FailedOp(opIndex, \"AA13 initCode failed or OOG\");\r\n            if (sender1 != sender) revert FailedOp(opIndex, \"AA14 initCode must return sender\");\r\n            if (sender1.code.length == 0) revert FailedOp(opIndex, \"AA15 initCode must create sender\");\r\n            address factory = address(bytes20(initCode[0 : 20]));\r\n            emit AccountDeployed(opInfo.userOpHash, sender, factory, opInfo.mUserOp.paymaster);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get counterfactual sender address.\r\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\r\n     * this method always revert, and returns the address in SenderAddressResult error\r\n     * @param initCode the constructor code to be passed into the UserOperation.\r\n     */\r\n    function getSenderAddress(bytes calldata initCode) public {\r\n        address sender = senderCreator.createSender(initCode);\r\n        revert SenderAddressResult(sender);\r\n    }\r\n\r\n    function _simulationOnlyValidations(UserOperation calldata userOp) internal view {\r\n        // solhint-disable-next-line no-empty-blocks\r\n        try this._validateSenderAndPaymaster(userOp.initCode, userOp.sender, userOp.paymasterAndData) {}\r\n        catch Error(string memory revertReason) {\r\n            if (bytes(revertReason).length != 0) {\r\n                revert FailedOp(0, revertReason);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Called only during simulation.\r\n    * This function always reverts to prevent warm/cold storage differentiation in simulation vs execution.\r\n    */\r\n    function _validateSenderAndPaymaster(bytes calldata initCode, address sender, bytes calldata paymasterAndData) external view {\r\n        if (initCode.length == 0 && sender.code.length == 0) {\r\n            // it would revert anyway. but give a meaningful message\r\n            revert(\"AA20 account not deployed\");\r\n        }\r\n        if (paymasterAndData.length >= 20) {\r\n            address paymaster = address(bytes20(paymasterAndData[0 : 20]));\r\n            if (paymaster.code.length == 0) {\r\n                // it would revert anyway. but give a meaningful message\r\n                revert(\"AA30 paymaster not deployed\");\r\n            }\r\n        }\r\n        // always revert\r\n        revert(\"\");\r\n    }\r\n\r\n    /**\r\n     * call account.validateUserOp.\r\n     * revert (with FailedOp) in case validateUserOp reverts, or account didn't send required prefund.\r\n     * decrement account's deposit if needed\r\n     */\r\n    function _validateAccountPrepayment(uint256 opIndex, UserOperation calldata op, UserOpInfo memory opInfo, uint256 requiredPrefund)\r\n    internal returns (uint256 gasUsedByValidateAccountPrepayment, uint256 validationData) {\r\n    unchecked {\r\n        uint256 preGas = gasleft();\r\n        MemoryUserOp memory mUserOp = opInfo.mUserOp;\r\n        address sender = mUserOp.sender;\r\n        _createSenderIfNeeded(opIndex, opInfo, op.initCode);\r\n        address paymaster = mUserOp.paymaster;\r\n        numberMarker();\r\n        uint256 missingAccountFunds = 0;\r\n        if (paymaster == address(0)) {\r\n            uint256 bal = balanceOf(sender);\r\n            missingAccountFunds = bal > requiredPrefund ? 0 : requiredPrefund - bal;\r\n        }\r\n        try IAccount(sender).validateUserOp{gas : mUserOp.verificationGasLimit}(op, opInfo.userOpHash, missingAccountFunds)\r\n        returns (uint256 _validationData) {\r\n            validationData = _validationData;\r\n        } catch Error(string memory revertReason) {\r\n            revert FailedOp(opIndex, string.concat(\"AA23 reverted: \", revertReason));\r\n        } catch {\r\n            revert FailedOp(opIndex, \"AA23 reverted (or OOG)\");\r\n        }\r\n        if (paymaster == address(0)) {\r\n            DepositInfo storage senderInfo = deposits[sender];\r\n            uint256 deposit = senderInfo.deposit;\r\n            if (requiredPrefund > deposit) {\r\n                revert FailedOp(opIndex, \"AA21 didn't pay prefund\");\r\n            }\r\n            senderInfo.deposit = uint112(deposit - requiredPrefund);\r\n        }\r\n        gasUsedByValidateAccountPrepayment = preGas - gasleft();\r\n    }\r\n    }\r\n\r\n    /**\r\n     * In case the request has a paymaster:\r\n     * Validate paymaster has enough deposit.\r\n     * Call paymaster.validatePaymasterUserOp.\r\n     * Revert with proper FailedOp in case paymaster reverts.\r\n     * Decrement paymaster's deposit\r\n     */\r\n    function _validatePaymasterPrepayment(uint256 opIndex, UserOperation calldata op, UserOpInfo memory opInfo, uint256 requiredPreFund, uint256 gasUsedByValidateAccountPrepayment)\r\n    internal returns (bytes memory context, uint256 validationData) {\r\n    unchecked {\r\n        MemoryUserOp memory mUserOp = opInfo.mUserOp;\r\n        uint256 verificationGasLimit = mUserOp.verificationGasLimit;\r\n        require(verificationGasLimit > gasUsedByValidateAccountPrepayment, \"AA41 too little verificationGas\");\r\n        uint256 gas = verificationGasLimit - gasUsedByValidateAccountPrepayment;\r\n\r\n        address paymaster = mUserOp.paymaster;\r\n        DepositInfo storage paymasterInfo = deposits[paymaster];\r\n        uint256 deposit = paymasterInfo.deposit;\r\n        if (deposit < requiredPreFund) {\r\n            revert FailedOp(opIndex, \"AA31 paymaster deposit too low\");\r\n        }\r\n        paymasterInfo.deposit = uint112(deposit - requiredPreFund);\r\n        try IPaymaster(paymaster).validatePaymasterUserOp{gas : gas}(op, opInfo.userOpHash, requiredPreFund) returns (bytes memory _context, uint256 _validationData){\r\n            context = _context;\r\n            validationData = _validationData;\r\n        } catch Error(string memory revertReason) {\r\n            revert FailedOp(opIndex, string.concat(\"AA33 reverted: \", revertReason));\r\n        } catch {\r\n            revert FailedOp(opIndex, \"AA33 reverted (or OOG)\");\r\n        }\r\n    }\r\n    }\r\n\r\n    /**\r\n     * revert if either account validationData or paymaster validationData is expired\r\n     */\r\n    function _validateAccountAndPaymasterValidationData(uint256 opIndex, uint256 validationData, uint256 paymasterValidationData, address expectedAggregator) internal view {\r\n        (address aggregator, bool outOfTimeRange) = _getValidationData(validationData);\r\n        if (expectedAggregator != aggregator) {\r\n            revert FailedOp(opIndex, \"AA24 signature error\");\r\n        }\r\n        if (outOfTimeRange) {\r\n            revert FailedOp(opIndex, \"AA22 expired or not due\");\r\n        }\r\n        //pmAggregator is not a real signature aggregator: we don't have logic to handle it as address.\r\n        // non-zero address means that the paymaster fails due to some signature check (which is ok only during estimation)\r\n        address pmAggregator;\r\n        (pmAggregator, outOfTimeRange) = _getValidationData(paymasterValidationData);\r\n        if (pmAggregator != address(0)) {\r\n            revert FailedOp(opIndex, \"AA34 signature error\");\r\n        }\r\n        if (outOfTimeRange) {\r\n            revert FailedOp(opIndex, \"AA32 paymaster expired or not due\");\r\n        }\r\n    }\r\n\r\n    function _getValidationData(uint256 validationData) internal view returns (address aggregator, bool outOfTimeRange) {\r\n        if (validationData == 0) {\r\n            return (address(0), false);\r\n        }\r\n        ValidationData memory data = _parseValidationData(validationData);\r\n        // solhint-disable-next-line not-rely-on-time\r\n        outOfTimeRange = block.timestamp > data.validUntil || block.timestamp < data.validAfter;\r\n        aggregator = data.aggregator;\r\n    }\r\n\r\n    /**\r\n     * validate account and paymaster (if defined).\r\n     * also make sure total validation doesn't exceed verificationGasLimit\r\n     * this method is called off-chain (simulateValidation()) and on-chain (from handleOps)\r\n     * @param opIndex the index of this userOp into the \"opInfos\" array\r\n     * @param userOp the userOp to validate\r\n     */\r\n    function _validatePrepayment(uint256 opIndex, UserOperation calldata userOp, UserOpInfo memory outOpInfo)\r\n    private returns (uint256 validationData, uint256 paymasterValidationData) {\r\n\r\n        uint256 preGas = gasleft();\r\n        MemoryUserOp memory mUserOp = outOpInfo.mUserOp;\r\n        _copyUserOpToMemory(userOp, mUserOp);\r\n        outOpInfo.userOpHash = getUserOpHash(userOp);\r\n\r\n        // validate all numeric values in userOp are well below 128 bit, so they can safely be added\r\n        // and multiplied without causing overflow\r\n        uint256 maxGasValues = mUserOp.preVerificationGas | mUserOp.verificationGasLimit | mUserOp.callGasLimit |\r\n        userOp.maxFeePerGas | userOp.maxPriorityFeePerGas;\r\n        require(maxGasValues <= type(uint120).max, \"AA94 gas values overflow\");\r\n\r\n        uint256 gasUsedByValidateAccountPrepayment;\r\n        (uint256 requiredPreFund) = _getRequiredPrefund(mUserOp);\r\n        (gasUsedByValidateAccountPrepayment, validationData) = _validateAccountPrepayment(opIndex, userOp, outOpInfo, requiredPreFund);\r\n\r\n        if (!_validateAndUpdateNonce(mUserOp.sender, mUserOp.nonce)) {\r\n            revert FailedOp(opIndex, \"AA25 invalid account nonce\");\r\n        }\r\n\r\n        //a \"marker\" where account opcode validation is done and paymaster opcode validation is about to start\r\n        // (used only by off-chain simulateValidation)\r\n        numberMarker();\r\n\r\n        bytes memory context;\r\n        if (mUserOp.paymaster != address(0)) {\r\n            (context, paymasterValidationData) = _validatePaymasterPrepayment(opIndex, userOp, outOpInfo, requiredPreFund, gasUsedByValidateAccountPrepayment);\r\n        }\r\n    unchecked {\r\n        uint256 gasUsed = preGas - gasleft();\r\n\r\n        if (userOp.verificationGasLimit < gasUsed) {\r\n            revert FailedOp(opIndex, \"AA40 over verificationGasLimit\");\r\n        }\r\n        outOpInfo.prefund = requiredPreFund;\r\n        outOpInfo.contextOffset = getOffsetOfMemoryBytes(context);\r\n        outOpInfo.preOpGas = preGas - gasleft() + userOp.preVerificationGas;\r\n    }\r\n    }\r\n\r\n    /**\r\n     * process post-operation.\r\n     * called just after the callData is executed.\r\n     * if a paymaster is defined and its validation returned a non-empty context, its postOp is called.\r\n     * the excess amount is refunded to the account (or paymaster - if it was used in the request)\r\n     * @param opIndex index in the batch\r\n     * @param mode - whether is called from innerHandleOp, or outside (postOpReverted)\r\n     * @param opInfo userOp fields and info collected during validation\r\n     * @param context the context returned in validatePaymasterUserOp\r\n     * @param actualGas the gas used so far by this user operation\r\n     */\r\n    function _handlePostOp(uint256 opIndex, IPaymaster.PostOpMode mode, UserOpInfo memory opInfo, bytes memory context, uint256 actualGas) private returns (uint256 actualGasCost) {\r\n        uint256 preGas = gasleft();\r\n    unchecked {\r\n        address refundAddress;\r\n        MemoryUserOp memory mUserOp = opInfo.mUserOp;\r\n        uint256 gasPrice = getUserOpGasPrice(mUserOp);\r\n\r\n        address paymaster = mUserOp.paymaster;\r\n        if (paymaster == address(0)) {\r\n            refundAddress = mUserOp.sender;\r\n        } else {\r\n            refundAddress = paymaster;\r\n            if (context.length > 0) {\r\n                actualGasCost = actualGas * gasPrice;\r\n                if (mode != IPaymaster.PostOpMode.postOpReverted) {\r\n                    IPaymaster(paymaster).postOp{gas : mUserOp.verificationGasLimit}(mode, context, actualGasCost);\r\n                } else {\r\n                    // solhint-disable-next-line no-empty-blocks\r\n                    try IPaymaster(paymaster).postOp{gas : mUserOp.verificationGasLimit}(mode, context, actualGasCost) {}\r\n                    catch Error(string memory reason) {\r\n                        revert FailedOp(opIndex, string.concat(\"AA50 postOp reverted: \", reason));\r\n                    }\r\n                    catch {\r\n                        revert FailedOp(opIndex, \"AA50 postOp revert\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        actualGas += preGas - gasleft();\r\n        actualGasCost = actualGas * gasPrice;\r\n        if (opInfo.prefund < actualGasCost) {\r\n            revert FailedOp(opIndex, \"AA51 prefund below actualGasCost\");\r\n        }\r\n        uint256 refund = opInfo.prefund - actualGasCost;\r\n        _incrementDeposit(refundAddress, refund);\r\n        bool success = mode == IPaymaster.PostOpMode.opSucceeded;\r\n        emit UserOperationEvent(opInfo.userOpHash, mUserOp.sender, mUserOp.paymaster, mUserOp.nonce, success, actualGasCost, actualGas);\r\n    } // unchecked\r\n    }\r\n\r\n    /**\r\n     * the gas price this UserOp agrees to pay.\r\n     * relayer/block builder might submit the TX with higher priorityFee, but the user should not\r\n     */\r\n    function getUserOpGasPrice(MemoryUserOp memory mUserOp) internal view returns (uint256) {\r\n    unchecked {\r\n        uint256 maxFeePerGas = mUserOp.maxFeePerGas;\r\n        uint256 maxPriorityFeePerGas = mUserOp.maxPriorityFeePerGas;\r\n        if (maxFeePerGas == maxPriorityFeePerGas) {\r\n            //legacy mode (for networks that don't support basefee opcode)\r\n            return maxFeePerGas;\r\n        }\r\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\r\n    }\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function getOffsetOfMemoryBytes(bytes memory data) internal pure returns (uint256 offset) {\r\n        assembly {offset := data}\r\n    }\r\n\r\n    function getMemoryBytesFromOffset(uint256 offset) internal pure returns (bytes memory data) {\r\n        assembly {data := offset}\r\n    }\r\n\r\n    //place the NUMBER opcode in the code.\r\n    // this is used as a marker during simulation, as this OP is completely banned from the simulated code of the\r\n    // account and paymaster.\r\n    function numberMarker() internal view {\r\n        assembly {mstore(0, number())}\r\n    }\r\n}\r\n\r\n"
    },
    "contracts/core/Helpers.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\n/* solhint-disable no-inline-assembly */\r\n\r\n/**\r\n * returned data from validateUserOp.\r\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\r\n * @param aggregator - address(0) - the account validated the signature by itself.\r\n *              address(1) - the account failed to validate the signature.\r\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\r\n * @param validAfter - this UserOp is valid only after this timestamp.\r\n * @param validaUntil - this UserOp is valid only up to this timestamp.\r\n */\r\n    struct ValidationData {\r\n        address aggregator;\r\n        uint48 validAfter;\r\n        uint48 validUntil;\r\n    }\r\n\r\n//extract sigFailed, validAfter, validUntil.\r\n// also convert zero validUntil to type(uint48).max\r\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\r\n        address aggregator = address(uint160(validationData));\r\n        uint48 validUntil = uint48(validationData >> 160);\r\n        if (validUntil == 0) {\r\n            validUntil = type(uint48).max;\r\n        }\r\n        uint48 validAfter = uint48(validationData >> (48 + 160));\r\n        return ValidationData(aggregator, validAfter, validUntil);\r\n    }\r\n\r\n// intersect account and paymaster ranges.\r\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\r\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\r\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\r\n        address aggregator = accountValidationData.aggregator;\r\n        if (aggregator == address(0)) {\r\n            aggregator = pmValidationData.aggregator;\r\n        }\r\n        uint48 validAfter = accountValidationData.validAfter;\r\n        uint48 validUntil = accountValidationData.validUntil;\r\n        uint48 pmValidAfter = pmValidationData.validAfter;\r\n        uint48 pmValidUntil = pmValidationData.validUntil;\r\n\r\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\r\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\r\n        return ValidationData(aggregator, validAfter, validUntil);\r\n    }\r\n\r\n/**\r\n * helper to pack the return value for validateUserOp\r\n * @param data - the ValidationData to pack\r\n */\r\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\r\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\r\n    }\r\n\r\n/**\r\n * helper to pack the return value for validateUserOp, when not using an aggregator\r\n * @param sigFailed - true for signature failure, false for success\r\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\r\n * @param validAfter first timestamp this UserOperation is valid\r\n */\r\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\r\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\r\n    }\r\n\r\n/**\r\n * keccak function over calldata.\r\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\r\n */\r\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\r\n        assembly {\r\n            let mem := mload(0x40)\r\n            let len := data.length\r\n            calldatacopy(mem, data.offset, len)\r\n            ret := keccak256(mem, len)\r\n        }\r\n    }\r\n\r\n"
    },
    "contracts/core/NonceManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\nimport \"../interfaces/IEntryPoint.sol\";\r\n\r\n/**\r\n * nonce management functionality\r\n */\r\ncontract NonceManager is INonceManager {\r\n\r\n    /**\r\n     * The next valid sequence number for a given nonce key.\r\n     */\r\n    mapping(address => mapping(uint192 => uint256)) public nonceSequenceNumber;\r\n\r\n    function getNonce(address sender, uint192 key)\r\n    public view override returns (uint256 nonce) {\r\n        return nonceSequenceNumber[sender][key] | (uint256(key) << 64);\r\n    }\r\n\r\n    // allow an account to manually increment its own nonce.\r\n    // (mainly so that during construction nonce can be made non-zero,\r\n    // to \"absorb\" the gas cost of first nonce increment to 1st transaction (construction),\r\n    // not to 2nd transaction)\r\n    function incrementNonce(uint192 key) public override {\r\n        nonceSequenceNumber[msg.sender][key]++;\r\n    }\r\n\r\n    /**\r\n     * validate nonce uniqueness for this account.\r\n     * called just after validateUserOp()\r\n     */\r\n    function _validateAndUpdateNonce(address sender, uint256 nonce) internal returns (bool) {\r\n\r\n        uint192 key = uint192(nonce >> 64);\r\n        uint64 seq = uint64(nonce);\r\n        return nonceSequenceNumber[sender][key]++ == seq;\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/core/SenderCreator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\n/**\r\n * helper contract for EntryPoint, to call userOp.initCode from a \"neutral\" address,\r\n * which is explicitly not the entryPoint itself.\r\n */\r\ncontract SenderCreator {\r\n\r\n    /**\r\n     * call the \"initCode\" factory to create and return the sender account address\r\n     * @param initCode the initCode value from a UserOp. contains 20 bytes of factory address, followed by calldata\r\n     * @return sender the returned address of the created account, or zero address on failure.\r\n     */\r\n    function createSender(bytes calldata initCode) external returns (address sender) {\r\n        address factory = address(bytes20(initCode[0 : 20]));\r\n        bytes memory initCallData = initCode[20 :];\r\n        bool success;\r\n        /* solhint-disable no-inline-assembly */\r\n        assembly {\r\n            success := call(gas(), factory, 0, add(initCallData, 0x20), mload(initCallData), 0, 32)\r\n            sender := mload(0)\r\n        }\r\n        if (!success) {\r\n            sender = address(0);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/core/StakeManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity ^0.8.12;\r\n\r\nimport \"../interfaces/IStakeManager.sol\";\r\n\r\n/* solhint-disable avoid-low-level-calls */\r\n/* solhint-disable not-rely-on-time */\r\n/**\r\n * manage deposits and stakes.\r\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\r\n * stake is value locked for at least \"unstakeDelay\" by a paymaster.\r\n */\r\nabstract contract StakeManager is IStakeManager {\r\n\r\n    /// maps paymaster to their deposits and stakes\r\n    mapping(address => DepositInfo) public deposits;\r\n\r\n    /// @inheritdoc IStakeManager\r\n    function getDepositInfo(address account) public view returns (DepositInfo memory info) {\r\n        return deposits[account];\r\n    }\r\n\r\n    // internal method to return just the stake info\r\n    function _getStakeInfo(address addr) internal view returns (StakeInfo memory info) {\r\n        DepositInfo storage depositInfo = deposits[addr];\r\n        info.stake = depositInfo.stake;\r\n        info.unstakeDelaySec = depositInfo.unstakeDelaySec;\r\n    }\r\n\r\n    /// return the deposit (for gas payment) of the account\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return deposits[account].deposit;\r\n    }\r\n\r\n    receive() external payable {\r\n        depositTo(msg.sender);\r\n    }\r\n\r\n    function _incrementDeposit(address account, uint256 amount) internal {\r\n        DepositInfo storage info = deposits[account];\r\n        uint256 newAmount = info.deposit + amount;\r\n        require(newAmount <= type(uint112).max, \"deposit overflow\");\r\n        info.deposit = uint112(newAmount);\r\n    }\r\n\r\n    /**\r\n     * add to the deposit of the given account\r\n     */\r\n    function depositTo(address account) public payable {\r\n        _incrementDeposit(account, msg.value);\r\n        DepositInfo storage info = deposits[account];\r\n        emit Deposited(account, info.deposit);\r\n    }\r\n\r\n    /**\r\n     * add to the account's stake - amount and delay\r\n     * any pending unstake is first cancelled.\r\n     * @param unstakeDelaySec the new lock duration before the deposit can be withdrawn.\r\n     */\r\n    function addStake(uint32 unstakeDelaySec) public payable {\r\n        DepositInfo storage info = deposits[msg.sender];\r\n        require(unstakeDelaySec > 0, \"must specify unstake delay\");\r\n        require(unstakeDelaySec >= info.unstakeDelaySec, \"cannot decrease unstake time\");\r\n        uint256 stake = info.stake + msg.value;\r\n        require(stake > 0, \"no stake specified\");\r\n        require(stake <= type(uint112).max, \"stake overflow\");\r\n        deposits[msg.sender] = DepositInfo(\r\n            info.deposit,\r\n            true,\r\n            uint112(stake),\r\n            unstakeDelaySec,\r\n            0\r\n        );\r\n        emit StakeLocked(msg.sender, stake, unstakeDelaySec);\r\n    }\r\n\r\n    /**\r\n     * attempt to unlock the stake.\r\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\r\n     */\r\n    function unlockStake() external {\r\n        DepositInfo storage info = deposits[msg.sender];\r\n        require(info.unstakeDelaySec != 0, \"not staked\");\r\n        require(info.staked, \"already unstaking\");\r\n        uint48 withdrawTime = uint48(block.timestamp) + info.unstakeDelaySec;\r\n        info.withdrawTime = withdrawTime;\r\n        info.staked = false;\r\n        emit StakeUnlocked(msg.sender, withdrawTime);\r\n    }\r\n\r\n\r\n    /**\r\n     * withdraw from the (unlocked) stake.\r\n     * must first call unlockStake and wait for the unstakeDelay to pass\r\n     * @param withdrawAddress the address to send withdrawn value.\r\n     */\r\n    function withdrawStake(address payable withdrawAddress) external {\r\n        DepositInfo storage info = deposits[msg.sender];\r\n        uint256 stake = info.stake;\r\n        require(stake > 0, \"No stake to withdraw\");\r\n        require(info.withdrawTime > 0, \"must call unlockStake() first\");\r\n        require(info.withdrawTime <= block.timestamp, \"Stake withdrawal is not due\");\r\n        info.unstakeDelaySec = 0;\r\n        info.withdrawTime = 0;\r\n        info.stake = 0;\r\n        emit StakeWithdrawn(msg.sender, withdrawAddress, stake);\r\n        (bool success,) = withdrawAddress.call{value : stake}(\"\");\r\n        require(success, \"failed to withdraw stake\");\r\n    }\r\n\r\n    /**\r\n     * withdraw from the deposit.\r\n     * @param withdrawAddress the address to send withdrawn value.\r\n     * @param withdrawAmount the amount to withdraw.\r\n     */\r\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external {\r\n        DepositInfo storage info = deposits[msg.sender];\r\n        require(withdrawAmount <= info.deposit, \"Withdraw amount too large\");\r\n        info.deposit = uint112(info.deposit - withdrawAmount);\r\n        emit Withdrawn(msg.sender, withdrawAddress, withdrawAmount);\r\n        (bool success,) = withdrawAddress.call{value : withdrawAmount}(\"\");\r\n        require(success, \"failed to withdraw\");\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IAccount.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\nimport \"./UserOperation.sol\";\r\n\r\ninterface IAccount {\r\n\r\n    /**\r\n     * Validate user's signature and nonce\r\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\r\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\r\n     * This allows making a \"simulation call\" without a valid signature\r\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\r\n     *\r\n     * @dev Must validate caller is the entryPoint.\r\n     *      Must validate the signature and nonce\r\n     * @param userOp the operation that is about to be executed.\r\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\r\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\r\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\r\n     *      The excess is left as a deposit in the entrypoint, for future calls.\r\n     *      can be withdrawn anytime using \"entryPoint.withdrawTo()\"\r\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\r\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\r\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\r\n     *         otherwise, an address of an \"authorizer\" contract.\r\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\r\n     *      <6-byte> validAfter - first timestamp this operation is valid\r\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\r\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\r\n     */\r\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\r\n    external returns (uint256 validationData);\r\n}\r\n"
    },
    "contracts/interfaces/IAggregator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\nimport \"./UserOperation.sol\";\r\n\r\n/**\r\n * Aggregated Signatures validator.\r\n */\r\ninterface IAggregator {\r\n\r\n    /**\r\n     * validate aggregated signature.\r\n     * revert if the aggregated signature does not match the given list of operations.\r\n     */\r\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\r\n\r\n    /**\r\n     * validate signature of a single userOp\r\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\r\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\r\n     * @param userOp the userOperation received from the user.\r\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\r\n     *    (usually empty, unless account and aggregator support some kind of \"multisig\"\r\n     */\r\n    function validateUserOpSignature(UserOperation calldata userOp)\r\n    external view returns (bytes memory sigForUserOp);\r\n\r\n    /**\r\n     * aggregate multiple signatures into a single value.\r\n     * This method is called off-chain to calculate the signature to pass with handleOps()\r\n     * bundler MAY use optimized custom code perform this aggregation\r\n     * @param userOps array of UserOperations to collect the signatures from.\r\n     * @return aggregatedSignature the aggregated signature\r\n     */\r\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\r\n}\r\n"
    },
    "contracts/interfaces/IEntryPoint.sol": {
      "content": "/**\r\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\r\n ** Only one instance required on each chain.\r\n **/\r\n// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\n/* solhint-disable avoid-low-level-calls */\r\n/* solhint-disable no-inline-assembly */\r\n/* solhint-disable reason-string */\r\n\r\nimport \"./UserOperation.sol\";\r\nimport \"./IStakeManager.sol\";\r\nimport \"./IAggregator.sol\";\r\nimport \"./INonceManager.sol\";\r\n\r\ninterface IEntryPoint is IStakeManager, INonceManager {\r\n\r\n    /***\r\n     * An event emitted after each successful request\r\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\r\n     * @param sender - the account that generates this request.\r\n     * @param paymaster - if non-null, the paymaster that pays for this request.\r\n     * @param nonce - the nonce value from the request.\r\n     * @param success - true if the sender transaction succeeded, false if reverted.\r\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\r\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\r\n     */\r\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\r\n\r\n    /**\r\n     * account \"sender\" was deployed.\r\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\r\n     * @param sender the account that is deployed\r\n     * @param factory the factory used to deploy this account (in the initCode)\r\n     * @param paymaster the paymaster used by this UserOp\r\n     */\r\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\r\n\r\n    /**\r\n     * An event emitted if the UserOperation \"callData\" reverted with non-zero length\r\n     * @param userOpHash the request unique identifier.\r\n     * @param sender the sender of this request\r\n     * @param nonce the nonce used in the request\r\n     * @param revertReason - the return bytes from the (reverted) call to \"callData\".\r\n     */\r\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\r\n\r\n    /**\r\n     * an event emitted by handleOps(), before starting the execution loop.\r\n     * any event emitted before this event, is part of the validation.\r\n     */\r\n    event BeforeExecution();\r\n\r\n    /**\r\n     * signature aggregator used by the following UserOperationEvents within this bundle.\r\n     */\r\n    event SignatureAggregatorChanged(address indexed aggregator);\r\n\r\n    /**\r\n     * a custom revert error of handleOps, to identify the offending op.\r\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\r\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\r\n     *  @param reason - revert reason\r\n     *      The string starts with a unique code \"AAmn\", where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,\r\n     *      so a failure can be attributed to the correct entity.\r\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\r\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\r\n     */\r\n    error FailedOp(uint256 opIndex, string reason);\r\n\r\n    /**\r\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\r\n     */\r\n    error SignatureValidationFailed(address aggregator);\r\n\r\n    /**\r\n     * Successful result from simulateValidation.\r\n     * @param returnInfo gas and time-range returned values\r\n     * @param senderInfo stake information about the sender\r\n     * @param factoryInfo stake information about the factory (if any)\r\n     * @param paymasterInfo stake information about the paymaster (if any)\r\n     */\r\n    error ValidationResult(ReturnInfo returnInfo,\r\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\r\n\r\n    /**\r\n     * Successful result from simulateValidation, if the account returns a signature aggregator\r\n     * @param returnInfo gas and time-range returned values\r\n     * @param senderInfo stake information about the sender\r\n     * @param factoryInfo stake information about the factory (if any)\r\n     * @param paymasterInfo stake information about the paymaster (if any)\r\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\r\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\r\n     */\r\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\r\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\r\n        AggregatorStakeInfo aggregatorInfo);\r\n\r\n    /**\r\n     * return value of getSenderAddress\r\n     */\r\n    error SenderAddressResult(address sender);\r\n\r\n    /**\r\n     * return value of simulateHandleOp\r\n     */\r\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint48 validAfter, uint48 validUntil, bool targetSuccess, bytes targetResult);\r\n\r\n    //UserOps handled, per aggregator\r\n    struct UserOpsPerAggregator {\r\n        UserOperation[] userOps;\r\n\r\n        // aggregator address\r\n        IAggregator aggregator;\r\n        // aggregated signature\r\n        bytes signature;\r\n    }\r\n\r\n    /**\r\n     * Execute a batch of UserOperation.\r\n     * no signature aggregator is used.\r\n     * if any account requires an aggregator (that is, it returned an aggregator when\r\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\r\n     * @param ops the operations to execute\r\n     * @param beneficiary the address to receive the fees\r\n     */\r\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\r\n\r\n    /**\r\n     * Execute a batch of UserOperation with Aggregators\r\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\r\n     * @param beneficiary the address to receive the fees\r\n     */\r\n    function handleAggregatedOps(\r\n        UserOpsPerAggregator[] calldata opsPerAggregator,\r\n        address payable beneficiary\r\n    ) external;\r\n\r\n    /**\r\n     * generate a request Id - unique identifier for this request.\r\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\r\n     */\r\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\r\n\r\n    /**\r\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\r\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\r\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\r\n     * @param userOp the user operation to validate.\r\n     */\r\n    function simulateValidation(UserOperation calldata userOp) external;\r\n\r\n    /**\r\n     * gas and return values during simulation\r\n     * @param preOpGas the gas used for validation (including preValidationGas)\r\n     * @param prefund the required prefund for this operation\r\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\r\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\r\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\r\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\r\n     */\r\n    struct ReturnInfo {\r\n        uint256 preOpGas;\r\n        uint256 prefund;\r\n        bool sigFailed;\r\n        uint48 validAfter;\r\n        uint48 validUntil;\r\n        bytes paymasterContext;\r\n    }\r\n\r\n    /**\r\n     * returned aggregated signature info.\r\n     * the aggregator returned by the account, and its current stake.\r\n     */\r\n    struct AggregatorStakeInfo {\r\n        address aggregator;\r\n        StakeInfo stakeInfo;\r\n    }\r\n\r\n    /**\r\n     * Get counterfactual sender address.\r\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\r\n     * this method always revert, and returns the address in SenderAddressResult error\r\n     * @param initCode the constructor code to be passed into the UserOperation.\r\n     */\r\n    function getSenderAddress(bytes memory initCode) external;\r\n\r\n\r\n    /**\r\n     * simulate full execution of a UserOperation (including both validation and target execution)\r\n     * this method will always revert with \"ExecutionResult\".\r\n     * it performs full validation of the UserOperation, but ignores signature error.\r\n     * an optional target address is called after the userop succeeds, and its value is returned\r\n     * (before the entire call is reverted)\r\n     * Note that in order to collect the the success/failure of the target call, it must be executed\r\n     * with trace enabled to track the emitted events.\r\n     * @param op the UserOperation to simulate\r\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\r\n     *        are set to the return from that call.\r\n     * @param targetCallData callData to pass to target address\r\n     */\r\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external;\r\n}\r\n\r\n"
    },
    "contracts/interfaces/IGuardian.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\ninterface IGuardian {\r\n    // The guardian relationship of the storage account\r\n    struct GuardianConfig {\r\n        address[] guardians;\r\n        uint256 approveThreshold;\r\n        uint256 delay;\r\n    }\r\n\r\n    event Register(address indexed account, address indexed guardian);\r\n\r\n    event Approved(\r\n        address indexed account,\r\n        address indexed guardian,\r\n        address newOwner\r\n    );\r\n\r\n    event ChangeGuardianConfig(\r\n        address indexed account,\r\n        address[] guardians,\r\n        uint256 approveThreshold,\r\n        uint256 delayBlock\r\n    );\r\n\r\n    function setConfig(\r\n        address account,\r\n        IGuardian.GuardianConfig memory config\r\n    ) external;\r\n}\r\n"
    },
    "contracts/interfaces/INonceManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\ninterface INonceManager {\r\n\r\n    /**\r\n     * Return the next nonce for this sender.\r\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\r\n     * But UserOp with different keys can come with arbitrary order.\r\n     *\r\n     * @param sender the account address\r\n     * @param key the high 192 bit of the nonce\r\n     * @return nonce a full nonce to pass for next UserOp with this sender.\r\n     */\r\n    function getNonce(address sender, uint192 key)\r\n    external view returns (uint256 nonce);\r\n\r\n    /**\r\n     * Manually increment the nonce of the sender.\r\n     * This method is exposed just for completeness..\r\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\r\n     * as the EntryPoint will update the nonce regardless.\r\n     * Possible use-case is call it with various keys to \"initialize\" their nonces to one, so that future\r\n     * UserOperations will not pay extra for the first transaction with a given key.\r\n     */\r\n    function incrementNonce(uint192 key) external;\r\n}\r\n"
    },
    "contracts/interfaces/IPaymaster.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\nimport \"./UserOperation.sol\";\r\n\r\n/**\r\n * the interface exposed by a paymaster contract, who agrees to pay the gas for user's operations.\r\n * a paymaster must hold a stake to cover the required entrypoint stake and also the gas for the transaction.\r\n */\r\ninterface IPaymaster {\r\n\r\n    enum PostOpMode {\r\n        opSucceeded, // user op succeeded\r\n        opReverted, // user op reverted. still has to pay for gas.\r\n        postOpReverted //user op succeeded, but caused postOp to revert. Now it's a 2nd call, after user's op was deliberately reverted.\r\n    }\r\n\r\n    /**\r\n     * payment validation: check if paymaster agrees to pay.\r\n     * Must verify sender is the entryPoint.\r\n     * Revert to reject this request.\r\n     * Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted)\r\n     * The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns.\r\n     * @param userOp the user operation\r\n     * @param userOpHash hash of the user's request data.\r\n     * @param maxCost the maximum cost of this transaction (based on maximum gas and gas price from userOp)\r\n     * @return context value to send to a postOp\r\n     *      zero length to signify postOp is not required.\r\n     * @return validationData signature and time-range of this operation, encoded the same as the return value of validateUserOperation\r\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\r\n     *         otherwise, an address of an \"authorizer\" contract.\r\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\r\n     *      <6-byte> validAfter - first timestamp this operation is valid\r\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\r\n     */\r\n    function validatePaymasterUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 maxCost)\r\n    external returns (bytes memory context, uint256 validationData);\r\n\r\n    /**\r\n     * post-operation handler.\r\n     * Must verify sender is the entryPoint\r\n     * @param mode enum with the following options:\r\n     *      opSucceeded - user operation succeeded.\r\n     *      opReverted  - user op reverted. still has to pay for gas.\r\n     *      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.\r\n     *                       Now this is the 2nd call, after user's op was deliberately reverted.\r\n     * @param context - the context value returned by validatePaymasterUserOp\r\n     * @param actualGasCost - actual gas used so far (without this postOp call).\r\n     */\r\n    function postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) external;\r\n}\r\n"
    },
    "contracts/interfaces/IStakeManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity ^0.8.12;\r\n\r\n/**\r\n * manage deposits and stakes.\r\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\r\n * stake is value locked for at least \"unstakeDelay\" by the staked entity.\r\n */\r\ninterface IStakeManager {\r\n\r\n    event Deposited(\r\n        address indexed account,\r\n        uint256 totalDeposit\r\n    );\r\n\r\n    event Withdrawn(\r\n        address indexed account,\r\n        address withdrawAddress,\r\n        uint256 amount\r\n    );\r\n\r\n    /// Emitted when stake or unstake delay are modified\r\n    event StakeLocked(\r\n        address indexed account,\r\n        uint256 totalStaked,\r\n        uint256 unstakeDelaySec\r\n    );\r\n\r\n    /// Emitted once a stake is scheduled for withdrawal\r\n    event StakeUnlocked(\r\n        address indexed account,\r\n        uint256 withdrawTime\r\n    );\r\n\r\n    event StakeWithdrawn(\r\n        address indexed account,\r\n        address withdrawAddress,\r\n        uint256 amount\r\n    );\r\n\r\n    /**\r\n     * @param deposit the entity's deposit\r\n     * @param staked true if this entity is staked.\r\n     * @param stake actual amount of ether staked for this entity.\r\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\r\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\r\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\r\n     *    and the rest fit into a 2nd cell.\r\n     *    112 bit allows for 10^15 eth\r\n     *    48 bit for full timestamp\r\n     *    32 bit allows 150 years for unstake delay\r\n     */\r\n    struct DepositInfo {\r\n        uint112 deposit;\r\n        bool staked;\r\n        uint112 stake;\r\n        uint32 unstakeDelaySec;\r\n        uint48 withdrawTime;\r\n    }\r\n\r\n    //API struct used by getStakeInfo and simulateValidation\r\n    struct StakeInfo {\r\n        uint256 stake;\r\n        uint256 unstakeDelaySec;\r\n    }\r\n\r\n    /// @return info - full deposit information of given account\r\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\r\n\r\n    /// @return the deposit (for gas payment) of the account\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * add to the deposit of the given account\r\n     */\r\n    function depositTo(address account) external payable;\r\n\r\n    /**\r\n     * add to the account's stake - amount and delay\r\n     * any pending unstake is first cancelled.\r\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\r\n     */\r\n    function addStake(uint32 _unstakeDelaySec) external payable;\r\n\r\n    /**\r\n     * attempt to unlock the stake.\r\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\r\n     */\r\n    function unlockStake() external;\r\n\r\n    /**\r\n     * withdraw from the (unlocked) stake.\r\n     * must first call unlockStake and wait for the unstakeDelay to pass\r\n     * @param withdrawAddress the address to send withdrawn value.\r\n     */\r\n    function withdrawStake(address payable withdrawAddress) external;\r\n\r\n    /**\r\n     * withdraw from the deposit.\r\n     * @param withdrawAddress the address to send withdrawn value.\r\n     * @param withdrawAmount the amount to withdraw.\r\n     */\r\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\r\n}\r\n"
    },
    "contracts/interfaces/ITSPAccount.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\ninterface ITSPAccount {\r\n    event ResetOwner(\r\n        address indexed account,\r\n        address oldOwner,\r\n        address newOwner\r\n    );\r\n\r\n    function resetOwner(address newAddress) external;\r\n}\r\n"
    },
    "contracts/interfaces/UserOperation.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\n/* solhint-disable no-inline-assembly */\r\n\r\nimport {calldataKeccak} from \"../core/Helpers.sol\";\r\n\r\n/**\r\n * User Operation struct\r\n * @param sender the sender account of this request.\r\n     * @param nonce unique value the sender uses to verify it is not a replay.\r\n     * @param initCode if set, the account contract will be created by this constructor/\r\n     * @param callData the method call to execute on this account.\r\n     * @param callGasLimit the gas limit passed to the callData method call.\r\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\r\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\r\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\r\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\r\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\r\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\r\n     */\r\n    struct UserOperation {\r\n\r\n        address sender;\r\n        uint256 nonce;\r\n        bytes initCode;\r\n        bytes callData;\r\n        uint256 callGasLimit;\r\n        uint256 verificationGasLimit;\r\n        uint256 preVerificationGas;\r\n        uint256 maxFeePerGas;\r\n        uint256 maxPriorityFeePerGas;\r\n        bytes paymasterAndData;\r\n        bytes signature;\r\n    }\r\n\r\n/**\r\n * Utility functions helpful when working with UserOperation structs.\r\n */\r\nlibrary UserOperationLib {\r\n\r\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\r\n        address data;\r\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\r\n        assembly {data := calldataload(userOp)}\r\n        return address(uint160(data));\r\n    }\r\n\r\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\r\n    // pay above what he signed for.\r\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\r\n    unchecked {\r\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\r\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\r\n        if (maxFeePerGas == maxPriorityFeePerGas) {\r\n            //legacy mode (for networks that don't support basefee opcode)\r\n            return maxFeePerGas;\r\n        }\r\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\r\n    }\r\n    }\r\n\r\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\r\n        address sender = getSender(userOp);\r\n        uint256 nonce = userOp.nonce;\r\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\r\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\r\n        uint256 callGasLimit = userOp.callGasLimit;\r\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\r\n        uint256 preVerificationGas = userOp.preVerificationGas;\r\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\r\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\r\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\r\n\r\n        return abi.encode(\r\n            sender, nonce,\r\n            hashInitCode, hashCallData,\r\n            callGasLimit, verificationGasLimit, preVerificationGas,\r\n            maxFeePerGas, maxPriorityFeePerGas,\r\n            hashPaymasterAndData\r\n        );\r\n    }\r\n\r\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\r\n        return keccak256(pack(userOp));\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n"
    },
    "contracts/samples/bls/BLSAccount.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\nimport \"../SimpleAccount.sol\";\r\nimport \"./IBLSAccount.sol\";\r\n\r\n/**\r\n * Minimal BLS-based account that uses an aggregated signature.\r\n * The account must maintain its own BLS public key, and expose its trusted signature aggregator.\r\n * Note that unlike the \"standard\" SimpleAccount, this account can't be called directly\r\n * (normal SimpleAccount uses its \"signer\" address as both the ecrecover signer, and as a legitimate\r\n * Ethereum sender address. Obviously, a BLS public key is not a valid Ethereum sender address.)\r\n */\r\ncontract BLSAccount is SimpleAccount, IBLSAccount {\r\n    address public immutable aggregator;\r\n    uint256[4] private publicKey;\r\n\r\n    // The constructor is used only for the \"implementation\" and only sets immutable values.\r\n    // Mutable value slots for proxy accounts are set by the 'initialize' function.\r\n    constructor(IEntryPoint anEntryPoint, address anAggregator) SimpleAccount(anEntryPoint)  {\r\n        aggregator = anAggregator;\r\n    }\r\n\r\n    /**\r\n     * The initializer for the BLSAccount instance.\r\n     * @param aPublicKey public key from a BLS keypair that will have a full ownership and control of this account.\r\n     */\r\n    function initialize(uint256[4] memory aPublicKey) public virtual initializer {\r\n        super._initialize(address(0));\r\n        _setBlsPublicKey(aPublicKey);\r\n    }\r\n\r\n    function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash)\r\n    internal override view returns (uint256 validationData) {\r\n\r\n        (userOp, userOpHash);\r\n        if (userOp.initCode.length != 0) {\r\n            // BLSSignatureAggregator.getUserOpPublicKey() assumes that during account creation, the public key is\r\n            // the suffix of the initCode.\r\n            // The account MUST validate it\r\n            bytes32 pubKeyHash = keccak256(abi.encode(getBlsPublicKey()));\r\n            require(keccak256(userOp.initCode[userOp.initCode.length - 128 :]) == pubKeyHash, \"wrong pubkey\");\r\n        }\r\n        return _packValidationData(ValidationData(aggregator, 0,0));\r\n    }\r\n\r\n    /**\r\n     * Allows the owner to set or change the BLS key.\r\n     * @param newPublicKey public key from a BLS keypair that will have a full ownership and control of this account.\r\n     */\r\n    function setBlsPublicKey(uint256[4] memory newPublicKey) public onlyOwner {\r\n        _setBlsPublicKey(newPublicKey);\r\n    }\r\n\r\n    function _setBlsPublicKey(uint256[4] memory newPublicKey) internal {\r\n        emit PublicKeyChanged(publicKey, newPublicKey);\r\n        publicKey = newPublicKey;\r\n    }\r\n\r\n    /// @inheritdoc IBLSAccount\r\n    function getBlsPublicKey() public override view returns (uint256[4] memory) {\r\n        return publicKey;\r\n    }\r\n}\r\n"
    },
    "contracts/samples/bls/BLSAccountFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\nimport \"@openzeppelin/contracts/utils/Create2.sol\";\r\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\r\n\r\nimport \"../../interfaces/IEntryPoint.sol\";\r\nimport \"./BLSAccount.sol\";\r\n\r\n/* solhint-disable no-inline-assembly */\r\n\r\n/**\r\n * Based on SimpleAccountFactory.\r\n * Cannot be a subclass since both constructor and createAccount depend on the\r\n * constructor and initializer of the actual account contract.\r\n */\r\ncontract BLSAccountFactory {\r\n    BLSAccount public immutable accountImplementation;\r\n\r\n    constructor(IEntryPoint entryPoint, address aggregator){\r\n        accountImplementation = new BLSAccount(entryPoint, aggregator);\r\n    }\r\n\r\n    /**\r\n     * create an account, and return its address.\r\n     * returns the address even if the account is already deployed.\r\n     * Note that during UserOperation execution, this method is called only if the account is not deployed.\r\n     * This method returns an existing account address so that entryPoint.getSenderAddress() would work even after account creation\r\n     * Also note that our BLSSignatureAggregator requires that the public key is the last parameter\r\n     */\r\n    function createAccount(uint256 salt, uint256[4] calldata aPublicKey) public returns (BLSAccount) {\r\n\r\n        // the BLSSignatureAggregator depends on the public-key being the last 4 uint256 of msg.data.\r\n        uint slot;\r\n        assembly {slot := aPublicKey}\r\n        require(slot == msg.data.length - 128, \"wrong pubkey offset\");\r\n\r\n        address addr = getAddress(salt, aPublicKey);\r\n        uint codeSize = addr.code.length;\r\n        if (codeSize > 0) {\r\n            return BLSAccount(payable(addr));\r\n        }\r\n        return BLSAccount(payable(new ERC1967Proxy{salt : bytes32(salt)}(\r\n                address(accountImplementation),\r\n                abi.encodeCall(BLSAccount.initialize, aPublicKey)\r\n            )));\r\n    }\r\n\r\n    /**\r\n     * calculate the counterfactual address of this account as it would be returned by createAccount()\r\n     */\r\n    function getAddress(uint256 salt, uint256[4] memory aPublicKey) public view returns (address) {\r\n        return Create2.computeAddress(bytes32(salt), keccak256(abi.encodePacked(\r\n                type(ERC1967Proxy).creationCode,\r\n                abi.encode(\r\n                    address(accountImplementation),\r\n                    abi.encodeCall(BLSAccount.initialize, (aPublicKey))\r\n                )\r\n            )));\r\n    }\r\n}\r\n"
    },
    "contracts/samples/bls/BLSHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\n// code taken from : https://github.com/witnet/elliptic-curve-solidity/blob/master/contracts/EllipticCurve.sol\r\n// missing core functions from \"thehubbleproject/bls\": jacAdd (and sum)\r\nlibrary  BLSHelper {\r\n\r\n    struct XY {\r\n        uint x;\r\n        uint y;\r\n    }\r\n    /**\r\n     * sum all the points in the array\r\n     * NOTE: the \"ecAdd\" (below) has a special case where x1==y2.\r\n     * @param points an array of bytes32[2], representing an (x,y) of a point\r\n     * @param _pp the modulus of the curve\r\n     * @return ret the sum of all points\r\n     */\r\n    function sum(XY[] memory points, uint256 _pp) internal pure returns (XY memory ret){\r\n        uint x = points[0].x;\r\n        uint y = points[0].y;\r\n        uint z = 1;\r\n\r\n        for (uint i = 1; i < points.length; i++) {\r\n            (x, y, z) = jacAdd(x, y, z, points[i].x, points[i].y, 1, _pp);\r\n        }\r\n        (x, y) = toAffine(x, y, z, _pp);\r\n        ret.x = x;\r\n        ret.y = y;\r\n    }\r\n\r\n    /// @dev Adds two points (x1, y1, z1) and (x2, y2, z2).\r\n    /// @param _x1 coordinate x of P1\r\n    /// @param _y1 coordinate y of P1\r\n    /// @param _z1 coordinate z of P1\r\n    /// @param _x2 coordinate x of square\r\n    /// @param _y2 coordinate y of square\r\n    /// @param _z2 coordinate z of square\r\n    /// @param _pp the modulus\r\n    /// @return (qx, qy, qz) P1+square in Jacobian\r\n    function jacAdd(\r\n        uint256 _x1,\r\n        uint256 _y1,\r\n        uint256 _z1,\r\n        uint256 _x2,\r\n        uint256 _y2,\r\n        uint256 _z2,\r\n        uint256 _pp)\r\n    internal pure returns (uint256, uint256, uint256)\r\n    {\r\n        if (_x1 == 0 && _y1 == 0)\r\n            return (_x2, _y2, _z2);\r\n        if (_x2 == 0 && _y2 == 0)\r\n            return (_x1, _y1, _z1);\r\n\r\n        // We follow the equations described in https://pdfs.semanticscholar.org/5c64/29952e08025a9649c2b0ba32518e9a7fb5c2.pdf Section 5\r\n        uint[4] memory zs;\r\n        // z1^2, z1^3, z2^2, z2^3\r\n        zs[0] = mulmod(_z1, _z1, _pp);\r\n        zs[1] = mulmod(_z1, zs[0], _pp);\r\n        zs[2] = mulmod(_z2, _z2, _pp);\r\n        zs[3] = mulmod(_z2, zs[2], _pp);\r\n\r\n        // u1, s1, u2, s2\r\n        zs = [\r\n        mulmod(_x1, zs[2], _pp),\r\n        mulmod(_y1, zs[3], _pp),\r\n        mulmod(_x2, zs[0], _pp),\r\n        mulmod(_y2, zs[1], _pp)\r\n        ];\r\n\r\n        // In case of zs[0] == zs[2] && zs[1] == zs[3], double function should be used\r\n        require(zs[0] != zs[2] || zs[1] != zs[3], \"Use jacDouble function instead\");\r\n\r\n        uint[4] memory hr;\r\n        //h\r\n        hr[0] = addmod(zs[2], _pp - zs[0], _pp);\r\n        //r\r\n        hr[1] = addmod(zs[3], _pp - zs[1], _pp);\r\n        //h^2\r\n        hr[2] = mulmod(hr[0], hr[0], _pp);\r\n        // h^3\r\n        hr[3] = mulmod(hr[2], hr[0], _pp);\r\n        // qx = -h^3  -2u1h^2+r^2\r\n        uint256 qx = addmod(mulmod(hr[1], hr[1], _pp), _pp - hr[3], _pp);\r\n        qx = addmod(qx, _pp - mulmod(2, mulmod(zs[0], hr[2], _pp), _pp), _pp);\r\n        // qy = -s1*z1*h^3+r(u1*h^2 -x^3)\r\n        uint256 qy = mulmod(hr[1], addmod(mulmod(zs[0], hr[2], _pp), _pp - qx, _pp), _pp);\r\n        qy = addmod(qy, _pp - mulmod(zs[1], hr[3], _pp), _pp);\r\n        // qz = h*z1*z2\r\n        uint256 qz = mulmod(hr[0], mulmod(_z1, _z2, _pp), _pp);\r\n        return (qx, qy, qz);\r\n    }\r\n\r\n\r\n    /// @dev Converts a point (x, y, z) expressed in Jacobian coordinates to affine coordinates (x', y', 1).\r\n    /// @param _x coordinate x\r\n    /// @param _y coordinate y\r\n    /// @param _z coordinate z\r\n    /// @param _pp the modulus\r\n    /// @return (x', y') affine coordinates\r\n    function toAffine(\r\n        uint256 _x,\r\n        uint256 _y,\r\n        uint256 _z,\r\n        uint256 _pp)\r\n    internal pure returns (uint256, uint256)\r\n    {\r\n        uint256 zInv = invMod(_z, _pp);\r\n        uint256 zInv2 = mulmod(zInv, zInv, _pp);\r\n        uint256 x2 = mulmod(_x, zInv2, _pp);\r\n        uint256 y2 = mulmod(_y, mulmod(zInv, zInv2, _pp), _pp);\r\n\r\n        return (x2, y2);\r\n    }\r\n\r\n\r\n    /// @dev Modular euclidean inverse of a number (mod p).\r\n    /// @param _x The number\r\n    /// @param _pp The modulus\r\n    /// @return q such that x*q = 1 (mod _pp)\r\n    function invMod(uint256 _x, uint256 _pp) internal pure returns (uint256) {\r\n        require(_x != 0 && _x != _pp && _pp != 0, \"Invalid number\");\r\n        uint256 q = 0;\r\n        uint256 newT = 1;\r\n        uint256 r = _pp;\r\n        uint256 t;\r\n        while (_x != 0) {\r\n            t = r / _x;\r\n            (q, newT) = (newT, addmod(q, (_pp - mulmod(t, newT, _pp)), _pp));\r\n            (r, _x) = (_x, r - t * _x);\r\n        }\r\n\r\n        return q;\r\n    }\r\n\r\n    /// @dev Doubles a point (x, y, z).\r\n    /// @param _x coordinate x of P1\r\n    /// @param _y coordinate y of P1\r\n    /// @param _z coordinate z of P1\r\n    /// @param _aa the a scalar in the curve equation\r\n    /// @param _pp the modulus\r\n    /// @return (qx, qy, qz) 2P in Jacobian\r\n    function jacDouble(\r\n        uint256 _x,\r\n        uint256 _y,\r\n        uint256 _z,\r\n        uint256 _aa,\r\n        uint256 _pp)\r\n    internal pure returns (uint256, uint256, uint256)\r\n    {\r\n        if (_z == 0)\r\n            return (_x, _y, _z);\r\n\r\n        // We follow the equations described in https://pdfs.semanticscholar.org/5c64/29952e08025a9649c2b0ba32518e9a7fb5c2.pdf Section 5\r\n        // Note: there is a bug in the paper regarding the m parameter, M=3*(x1^2)+a*(z1^4)\r\n        // x, y, z at this point represent the squares of _x, _y, _z\r\n        uint256 x = mulmod(_x, _x, _pp); //x1^2\r\n        uint256 y = mulmod(_y, _y, _pp); //y1^2\r\n        uint256 z = mulmod(_z, _z, _pp); //z1^2\r\n\r\n        // s\r\n        uint s = mulmod(4, mulmod(_x, y, _pp), _pp);\r\n        // m\r\n        uint m = addmod(mulmod(3, x, _pp), mulmod(_aa, mulmod(z, z, _pp), _pp), _pp);\r\n\r\n        // x, y, z at this point will be reassigned and rather represent qx, qy, qz from the paper\r\n        // This allows to reduce the gas cost and stack footprint of the algorithm\r\n        // qx\r\n        x = addmod(mulmod(m, m, _pp), _pp - addmod(s, s, _pp), _pp);\r\n        // qy = -8*y1^4 + M(S-T)\r\n        y = addmod(mulmod(m, addmod(s, _pp - x, _pp), _pp), _pp - mulmod(8, mulmod(y, y, _pp), _pp), _pp);\r\n        // qz = 2*y1*z1\r\n        z = mulmod(2, mulmod(_y, _z, _pp), _pp);\r\n\r\n        return (x, y, z);\r\n    }\r\n\r\n    /// @dev Add two points (x1, y1) and (x2, y2) in affine coordinates.\r\n    /// @param _x1 coordinate x of P1\r\n    /// @param _y1 coordinate y of P1\r\n    /// @param _x2 coordinate x of P2\r\n    /// @param _y2 coordinate y of P2\r\n    /// @param _aa constant of the curve\r\n    /// @param _pp the modulus\r\n    /// @return (qx, qy) = P1+P2 in affine coordinates\r\n    function ecAdd(\r\n        uint256 _x1,\r\n        uint256 _y1,\r\n        uint256 _x2,\r\n        uint256 _y2,\r\n        uint256 _aa,\r\n        uint256 _pp)\r\n    internal pure returns (uint256, uint256)\r\n    {\r\n        uint x = 0;\r\n        uint y = 0;\r\n        uint z = 0;\r\n\r\n        // Double if x1==x2 else add\r\n        if (_x1 == _x2) {\r\n            // y1 = -y2 mod p\r\n            if (addmod(_y1, _y2, _pp) == 0) {\r\n                return (0, 0);\r\n            } else {\r\n                // P1 = P2\r\n                (x, y, z) = jacDouble(\r\n                    _x1,\r\n                    _y1,\r\n                    1,\r\n                    _aa,\r\n                    _pp);\r\n            }\r\n        } else {\r\n            (x, y, z) = jacAdd(\r\n                _x1,\r\n                _y1,\r\n                1,\r\n                _x2,\r\n                _y2,\r\n                1,\r\n                _pp);\r\n        }\r\n        // Get back to affine\r\n        return toAffine(\r\n            x,\r\n            y,\r\n            z,\r\n            _pp);\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/samples/bls/BLSSignatureAggregator.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity >=0.8.4 <0.9.0;\r\npragma abicoder v2;\r\n\r\nimport \"../../interfaces/IAggregator.sol\";\r\nimport \"../../interfaces/IEntryPoint.sol\";\r\nimport {BLSOpen} from  \"./lib/BLSOpen.sol\";\r\nimport \"./IBLSAccount.sol\";\r\nimport \"./BLSHelper.sol\";\r\n\r\n/**\r\n * A BLS-based signature aggregator, to validate aggregated signature of multiple UserOps if BLSAccount\r\n */\r\ncontract BLSSignatureAggregator is IAggregator {\r\n    using UserOperationLib for UserOperation;\r\n\r\n    bytes32 public constant BLS_DOMAIN = keccak256(\"eip4337.bls.domain\");\r\n\r\n     //copied from BLS.sol\r\n    uint256 public  constant N = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\r\n\r\n    /**\r\n     * @return publicKey - the public key from a BLS keypair the Aggregator will use to verify this UserOp;\r\n     *         normally public key will be queried from the deployed BLSAccount itself;\r\n     *         the public key will be read from the 'initCode' if the account is not deployed yet;\r\n     */\r\n    function getUserOpPublicKey(UserOperation memory userOp) public view returns (uint256[4] memory publicKey) {\r\n        bytes memory initCode = userOp.initCode;\r\n        if (initCode.length > 0) {\r\n            publicKey = getTrailingPublicKey(initCode);\r\n        } else {\r\n            return IBLSAccount(userOp.sender).getBlsPublicKey{gas : 50000}();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * return the trailing 4 words of input data\r\n     */\r\n    function getTrailingPublicKey(bytes memory data) public pure returns (uint256[4] memory publicKey) {\r\n        uint len = data.length;\r\n        require(len > 32 * 4, \"data too short for sig\");\r\n\r\n        /* solhint-disable-next-line no-inline-assembly */\r\n        assembly {\r\n        // actual buffer starts at data+32, so last 128 bytes start at data+32+len-128 = data+len-96\r\n            let ofs := sub(add(data, len), 96)\r\n            mstore(publicKey, mload(ofs))\r\n            mstore(add(publicKey, 32), mload(add(ofs, 32)))\r\n            mstore(add(publicKey, 64), mload(add(ofs, 64)))\r\n            mstore(add(publicKey, 96), mload(add(ofs, 96)))\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IAggregator\r\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature)\r\n    external view override {\r\n        require(signature.length == 64, \"BLS: invalid signature\");\r\n        (uint256[2] memory blsSignature) = abi.decode(signature, (uint256[2]));\r\n\r\n        uint userOpsLen = userOps.length;\r\n        uint256[4][] memory blsPublicKeys = new uint256[4][](userOpsLen);\r\n        uint256[2][] memory messages = new uint256[2][](userOpsLen);\r\n        for (uint256 i = 0; i < userOpsLen; i++) {\r\n\r\n            UserOperation memory userOp = userOps[i];\r\n            blsPublicKeys[i] = getUserOpPublicKey(userOp);\r\n\r\n            messages[i] = _userOpToMessage(userOp, _getPublicKeyHash(blsPublicKeys[i]));\r\n        }\r\n        require(BLSOpen.verifyMultiple(blsSignature, blsPublicKeys, messages), \"BLS: validateSignatures failed\");\r\n    }\r\n\r\n    /**\r\n     * get a hash of userOp\r\n     * NOTE: this hash is not the same as UserOperation.hash()\r\n     *  (slightly less efficient, since it uses memory userOp)\r\n     */\r\n    function internalUserOpHash(UserOperation memory userOp) internal pure returns (bytes32) {\r\n        return keccak256(abi.encode(\r\n                userOp.sender,\r\n                userOp.nonce,\r\n                keccak256(userOp.initCode),\r\n                keccak256(userOp.callData),\r\n                userOp.callGasLimit,\r\n                userOp.verificationGasLimit,\r\n                userOp.preVerificationGas,\r\n                userOp.maxFeePerGas,\r\n                userOp.maxPriorityFeePerGas,\r\n                keccak256(userOp.paymasterAndData)\r\n            ));\r\n    }\r\n\r\n    /**\r\n     * return the BLS \"message\" for the given UserOp.\r\n     * the account checks the signature over this value using its public key\r\n     */\r\n    function userOpToMessage(UserOperation memory userOp) public view returns (uint256[2] memory) {\r\n        bytes32 publicKeyHash = _getPublicKeyHash(getUserOpPublicKey(userOp));\r\n        return _userOpToMessage(userOp, publicKeyHash);\r\n    }\r\n\r\n    function _userOpToMessage(UserOperation memory userOp, bytes32 publicKeyHash) internal view returns (uint256[2] memory) {\r\n        bytes32 userOpHash = _getUserOpHash(userOp, publicKeyHash);\r\n        return BLSOpen.hashToPoint(BLS_DOMAIN, abi.encodePacked(userOpHash));\r\n    }\r\n\r\n    // helper for test\r\n    function getUserOpHash(UserOperation memory userOp) public view returns (bytes32) {\r\n        bytes32 publicKeyHash = _getPublicKeyHash(getUserOpPublicKey(userOp));\r\n        return _getUserOpHash(userOp, publicKeyHash);\r\n    }\r\n\r\n    function _getUserOpHash(UserOperation memory userOp, bytes32 publicKeyHash) internal view returns (bytes32) {\r\n        return keccak256(abi.encode(internalUserOpHash(userOp), publicKeyHash, address(this), block.chainid));\r\n    }\r\n\r\n    function _getPublicKeyHash(uint256[4] memory publicKey) internal pure returns(bytes32) {\r\n        return keccak256(abi.encode(publicKey));\r\n    }\r\n    /**\r\n     * validate signature of a single userOp\r\n     * This method is called after EntryPoint.simulateValidation() returns an aggregator.\r\n     * First it validates the signature over the userOp. then it return data to be used when creating the handleOps:\r\n     * @param userOp the userOperation received from the user.\r\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\r\n     *    (usually empty, unless account and aggregator support some kind of \"multisig\"\r\n     */\r\n    function validateUserOpSignature(UserOperation calldata userOp)\r\n    external view returns (bytes memory sigForUserOp) {\r\n        uint256[2] memory signature = abi.decode(userOp.signature, (uint256[2]));\r\n        uint256[4] memory pubkey = getUserOpPublicKey(userOp);\r\n        uint256[2] memory message = _userOpToMessage(userOp, _getPublicKeyHash(pubkey));\r\n\r\n        require(BLSOpen.verifySingle(signature, pubkey, message), \"BLS: wrong sig\");\r\n        return \"\";\r\n    }\r\n\r\n\r\n    /**\r\n     * aggregate multiple signatures into a single value.\r\n     * This method is called off-chain to calculate the signature to pass with handleOps()\r\n     * bundler MAY use optimized custom code perform this aggregation\r\n     * @param userOps array of UserOperations to collect the signatures from.\r\n     * @return aggregatedSignature the aggregated signature\r\n     */\r\n    function aggregateSignatures(UserOperation[] calldata userOps) external pure returns (bytes memory aggregatedSignature) {\r\n        BLSHelper.XY[] memory points = new BLSHelper.XY[](userOps.length);\r\n        for (uint i = 0; i < points.length; i++) {\r\n            (uint256 x, uint256 y) = abi.decode(userOps[i].signature, (uint256, uint256));\r\n            points[i] = BLSHelper.XY(x, y);\r\n        }\r\n        BLSHelper.XY memory sum = BLSHelper.sum(points, N);\r\n        return abi.encode(sum.x, sum.y);\r\n    }\r\n\r\n    /**\r\n     * allow staking for this aggregator\r\n     * there is no limit on stake or delay, but it is not a problem, since it is a permissionless\r\n     * signature aggregator, which doesn't support unstaking.\r\n     */\r\n    function addStake(IEntryPoint entryPoint, uint32 delay) external payable {\r\n        entryPoint.addStake{value : msg.value}(delay);\r\n    }\r\n}\r\n"
    },
    "contracts/samples/bls/IBLSAccount.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.7.6;\r\n\r\nimport \"../../interfaces/IAccount.sol\";\r\n\r\n/**\r\n * a BLS account should expose its own public key.\r\n */\r\ninterface IBLSAccount is IAccount {\r\n    event PublicKeyChanged(uint256[4] oldPublicKey, uint256[4] newPublicKey);\r\n\r\n    /**\r\n     * @return public key from a BLS keypair that is used to verify the BLS signature, both separately and aggregated.\r\n     */\r\n    function getBlsPublicKey() external view returns (uint256[4] memory);\r\n}\r\n"
    },
    "contracts/samples/bls/lib/BLSOpen.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >= 0.6.12;\r\n\r\nimport { BLS } from \"./hubble-contracts/contracts/libs/BLS.sol\";\r\n\r\nlibrary BLSOpen {\r\n    function verifySingle(\r\n        uint256[2] memory signature,\r\n        uint256[4] memory pubkey,\r\n        uint256[2] memory message\r\n    ) external view returns (bool) {\r\n        uint256[4][] memory pubkeys = new uint256[4][](1);\r\n        uint256[2][] memory messages = new uint256[2][](1);\r\n        pubkeys[0] = pubkey;\r\n        messages[0] = message;\r\n\r\n        (bool verified, bool callSuccess) =  BLS.verifyMultiple(\r\n            signature,\r\n            pubkeys,\r\n            messages\r\n        );\r\n        return callSuccess && verified;\r\n\r\n        // // NB: (result, success) opposite of `call` convention (success, result).\r\n        // (bool verified, bool callSuccess) = BLS.verifySingle(\r\n        //     signature,\r\n        //     pubkey,\r\n        //     message\r\n        // );\r\n        // return callSuccess && verified;\r\n    }\r\n\r\n    function verifyMultiple(\r\n        uint256[2] memory signature,\r\n        uint256[4][] memory pubkeys,\r\n        uint256[2][] memory messages\r\n    ) external view returns (bool) {\r\n        (bool verified, bool callSuccess) =  BLS.verifyMultiple(\r\n            signature,\r\n            pubkeys,\r\n            messages\r\n        );\r\n        return callSuccess && verified;\r\n    }\r\n\r\n    function hashToPoint(\r\n        bytes32 domain,\r\n        bytes memory message\r\n    ) external view returns (uint256[2] memory) {\r\n        return BLS.hashToPoint(\r\n            domain,\r\n            message\r\n        );\r\n    }\r\n\r\n    function isZeroBLSKey(uint256[4] memory blsKey) public pure returns (bool) {\r\n        bool isZero = true;\r\n        for (uint256 i=0; isZero && i<4; i++) {\r\n            isZero = (blsKey[i] == 0);\r\n        }\r\n        return isZero;\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/samples/bls/lib/hubble-contracts/contracts/libs/BLS.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >= 0.6.12;\r\n\r\nimport { ModexpInverse, ModexpSqrt } from \"./ModExp.sol\";\r\nimport {\r\n    BNPairingPrecompileCostEstimator\r\n} from \"./BNPairingPrecompileCostEstimator.sol\";\r\n\r\n/**\r\n    @title  Boneh–Lynn–Shacham (BLS) signature scheme on Barreto-Naehrig 254 bit curve (BN-254)\r\n    @notice We use BLS signature aggregation to reduce the size of signature data to store on chain.\r\n    @dev We use G1 points for signatures and messages, and G2 points for public keys\r\n */\r\nlibrary BLS {\r\n    // Field order\r\n    // prettier-ignore\r\n    uint256 private constant N = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\r\n\r\n    // Negated genarator of G2\r\n    // prettier-ignore\r\n    uint256 private constant N_G2_X1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\r\n    // prettier-ignore\r\n    uint256 private constant N_G2_X0 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\r\n    // prettier-ignore\r\n    uint256 private constant N_G2_Y1 = 17805874995975841540914202342111839520379459829704422454583296818431106115052;\r\n    // prettier-ignore\r\n    uint256 private constant N_G2_Y0 = 13392588948715843804641432497768002650278120570034223513918757245338268106653;\r\n\r\n    // sqrt(-3)\r\n    // prettier-ignore\r\n    uint256 private constant Z0 = 0x0000000000000000b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd;\r\n    // (sqrt(-3) - 1)  / 2\r\n    // prettier-ignore\r\n    uint256 private constant Z1 = 0x000000000000000059e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe;\r\n\r\n    // prettier-ignore\r\n    uint256 private constant T24 = 0x1000000000000000000000000000000000000000000000000;\r\n    // prettier-ignore\r\n    uint256 private constant MASK24 = 0xffffffffffffffffffffffffffffffffffffffffffffffff;\r\n\r\n    // estimator address\r\n//    address private constant COST_ESTIMATOR_ADDRESS =  new 0x22E4a5251C1F02de8369Dd6f192033F6CB7531A4;\r\n\r\n    function verifySingle(\r\n        uint256[2] memory signature,\r\n        uint256[4] memory pubkey,\r\n        uint256[2] memory message\r\n    ) internal view returns (bool, bool) {\r\n        uint256[12] memory input =\r\n            [\r\n                signature[0],\r\n                signature[1],\r\n                N_G2_X1,\r\n                N_G2_X0,\r\n                N_G2_Y1,\r\n                N_G2_Y0,\r\n                message[0],\r\n                message[1],\r\n                pubkey[1],\r\n                pubkey[0],\r\n                pubkey[3],\r\n                pubkey[2]\r\n            ];\r\n        uint256[1] memory out;\r\n        uint256 precompileGasCost = gasleft();\r\n//            BNPairingPrecompileCostEstimator(COST_ESTIMATOR_ADDRESS).getGasCost(\r\n//                2\r\n//            );\r\n        bool callSuccess;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            callSuccess := staticcall(\r\n                precompileGasCost,\r\n                8,\r\n                input,\r\n                384,\r\n                out,\r\n                0x20\r\n            )\r\n        }\r\n        if (!callSuccess) {\r\n            return (false, false);\r\n        }\r\n        return (out[0] != 0, true);\r\n    }\r\n\r\n    function verifyMultiple(\r\n        uint256[2] memory signature,\r\n        uint256[4][] memory pubkeys,\r\n        uint256[2][] memory messages\r\n    ) internal view returns (bool checkResult, bool callSuccess) {\r\n        uint256 size = pubkeys.length;\r\n        require(size > 0, \"BLS: number of public key is zero\");\r\n        require(\r\n            size == messages.length,\r\n            \"BLS: number of public keys and messages must be equal\"\r\n        );\r\n        uint256 inputSize = (size + 1) * 6;\r\n        uint256[] memory input = new uint256[](inputSize);\r\n        input[0] = signature[0];\r\n        input[1] = signature[1];\r\n        input[2] = N_G2_X1;\r\n        input[3] = N_G2_X0;\r\n        input[4] = N_G2_Y1;\r\n        input[5] = N_G2_Y0;\r\n        for (uint256 i = 0; i < size; i++) {\r\n            input[i * 6 + 6] = messages[i][0];\r\n            input[i * 6 + 7] = messages[i][1];\r\n            input[i * 6 + 8] = pubkeys[i][1];\r\n            input[i * 6 + 9] = pubkeys[i][0];\r\n            input[i * 6 + 10] = pubkeys[i][3];\r\n            input[i * 6 + 11] = pubkeys[i][2];\r\n        }\r\n        uint256[1] memory out;\r\n\r\n        // prettier-ignore\r\n        uint256 precompileGasCost = gasleft();\r\n//        uint256 precompileGasCost = BNPairingPrecompileCostEstimator(COST_ESTIMATOR_ADDRESS).getGasCost(size + 1);\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            callSuccess := staticcall(\r\n                precompileGasCost,\r\n                8,\r\n                add(input, 0x20),\r\n                mul(inputSize, 0x20),\r\n                out,\r\n                0x20\r\n            )\r\n        }\r\n        if (!callSuccess) {\r\n            return (false, false);\r\n        }\r\n        return (out[0] != 0, true);\r\n    }\r\n\r\n    /**\r\n    @notice Fouque-Tibouchi Hash to Curve\r\n     */\r\n    function hashToPoint(bytes32 domain, bytes memory message)\r\n        internal\r\n        view\r\n        returns (uint256[2] memory)\r\n    {\r\n        uint256[2] memory u = hashToField(domain, message);\r\n        uint256[2] memory p0 = mapToPoint(u[0]);\r\n        uint256[2] memory p1 = mapToPoint(u[1]);\r\n        uint256[4] memory bnAddInput;\r\n        bnAddInput[0] = p0[0];\r\n        bnAddInput[1] = p0[1];\r\n        bnAddInput[2] = p1[0];\r\n        bnAddInput[3] = p1[1];\r\n        bool success;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            success := staticcall(sub(gas(), 2000), 6, bnAddInput, 128, p0, 64)\r\n            switch success\r\n                case 0 {\r\n                    invalid()\r\n                }\r\n        }\r\n        require(success, \"BLS: bn add call failed\");\r\n        return p0;\r\n    }\r\n\r\n    function mapToPoint(uint256 _x)\r\n        internal\r\n        pure\r\n        returns (uint256[2] memory p)\r\n    {\r\n        require(_x < N, \"mapToPointFT: invalid field element\");\r\n        uint256 x = _x;\r\n\r\n        (, bool decision) = sqrt(x);\r\n\r\n        uint256 a0 = mulmod(x, x, N);\r\n        a0 = addmod(a0, 4, N);\r\n        uint256 a1 = mulmod(x, Z0, N);\r\n        uint256 a2 = mulmod(a1, a0, N);\r\n        a2 = inverse(a2);\r\n        a1 = mulmod(a1, a1, N);\r\n        a1 = mulmod(a1, a2, N);\r\n\r\n        // x1\r\n        a1 = mulmod(x, a1, N);\r\n        x = addmod(Z1, N - a1, N);\r\n        // check curve\r\n        a1 = mulmod(x, x, N);\r\n        a1 = mulmod(a1, x, N);\r\n        a1 = addmod(a1, 3, N);\r\n        bool found;\r\n        (a1, found) = sqrt(a1);\r\n        if (found) {\r\n            if (!decision) {\r\n                a1 = N - a1;\r\n            }\r\n            return [x, a1];\r\n        }\r\n\r\n        // x2\r\n        x = N - addmod(x, 1, N);\r\n        // check curve\r\n        a1 = mulmod(x, x, N);\r\n        a1 = mulmod(a1, x, N);\r\n        a1 = addmod(a1, 3, N);\r\n        (a1, found) = sqrt(a1);\r\n        if (found) {\r\n            if (!decision) {\r\n                a1 = N - a1;\r\n            }\r\n            return [x, a1];\r\n        }\r\n\r\n        // x3\r\n        x = mulmod(a0, a0, N);\r\n        x = mulmod(x, x, N);\r\n        x = mulmod(x, a2, N);\r\n        x = mulmod(x, a2, N);\r\n        x = addmod(x, 1, N);\r\n        // must be on curve\r\n        a1 = mulmod(x, x, N);\r\n        a1 = mulmod(a1, x, N);\r\n        a1 = addmod(a1, 3, N);\r\n        (a1, found) = sqrt(a1);\r\n        require(found, \"BLS: bad ft mapping implementation\");\r\n        if (!decision) {\r\n            a1 = N - a1;\r\n        }\r\n        return [x, a1];\r\n    }\r\n\r\n    function isValidSignature(uint256[2] memory signature)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        if ((signature[0] >= N) || (signature[1] >= N)) {\r\n            return false;\r\n        } else {\r\n            return isOnCurveG1(signature);\r\n        }\r\n    }\r\n\r\n    function isOnCurveG1(uint256[2] memory point)\r\n        internal\r\n        pure\r\n        returns (bool _isOnCurve)\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let t0 := mload(point)\r\n            let t1 := mload(add(point, 32))\r\n            let t2 := mulmod(t0, t0, N)\r\n            t2 := mulmod(t2, t0, N)\r\n            t2 := addmod(t2, 3, N)\r\n            t1 := mulmod(t1, t1, N)\r\n            _isOnCurve := eq(t1, t2)\r\n        }\r\n    }\r\n\r\n    function isOnCurveG2(uint256[4] memory point)\r\n        internal\r\n        pure\r\n        returns (bool _isOnCurve)\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            // x0, x1\r\n            let t0 := mload(point)\r\n            let t1 := mload(add(point, 32))\r\n            // x0 ^ 2\r\n            let t2 := mulmod(t0, t0, N)\r\n            // x1 ^ 2\r\n            let t3 := mulmod(t1, t1, N)\r\n            // 3 * x0 ^ 2\r\n            let t4 := add(add(t2, t2), t2)\r\n            // 3 * x1 ^ 2\r\n            let t5 := addmod(add(t3, t3), t3, N)\r\n            // x0 * (x0 ^ 2 - 3 * x1 ^ 2)\r\n            t2 := mulmod(add(t2, sub(N, t5)), t0, N)\r\n            // x1 * (3 * x0 ^ 2 - x1 ^ 2)\r\n            t3 := mulmod(add(t4, sub(N, t3)), t1, N)\r\n\r\n            // x ^ 3 + b\r\n            t0 := addmod(\r\n                t2,\r\n                0x2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5,\r\n                N\r\n            )\r\n            t1 := addmod(\r\n                t3,\r\n                0x009713b03af0fed4cd2cafadeed8fdf4a74fa084e52d1852e4a2bd0685c315d2,\r\n                N\r\n            )\r\n\r\n            // y0, y1\r\n            t2 := mload(add(point, 64))\r\n            t3 := mload(add(point, 96))\r\n            // y ^ 2\r\n            t4 := mulmod(addmod(t2, t3, N), addmod(t2, sub(N, t3), N), N)\r\n            t3 := mulmod(shl(1, t2), t3, N)\r\n\r\n            // y ^ 2 == x ^ 3 + b\r\n            _isOnCurve := and(eq(t0, t4), eq(t1, t3))\r\n        }\r\n    }\r\n\r\n    function sqrt(uint256 xx) internal pure returns (uint256 x, bool hasRoot) {\r\n        x = ModexpSqrt.run(xx);\r\n        hasRoot = mulmod(x, x, N) == xx;\r\n    }\r\n\r\n    function inverse(uint256 a) internal pure returns (uint256) {\r\n        return ModexpInverse.run(a);\r\n    }\r\n\r\n    function hashToField(bytes32 domain, bytes memory messages)\r\n        internal\r\n        pure\r\n        returns (uint256[2] memory)\r\n    {\r\n        bytes memory _msg = expandMsgTo96(domain, messages);\r\n        uint256 u0;\r\n        uint256 u1;\r\n        uint256 a0;\r\n        uint256 a1;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let p := add(_msg, 24)\r\n            u1 := and(mload(p), MASK24)\r\n            p := add(_msg, 48)\r\n            u0 := and(mload(p), MASK24)\r\n            a0 := addmod(mulmod(u1, T24, N), u0, N)\r\n            p := add(_msg, 72)\r\n            u1 := and(mload(p), MASK24)\r\n            p := add(_msg, 96)\r\n            u0 := and(mload(p), MASK24)\r\n            a1 := addmod(mulmod(u1, T24, N), u0, N)\r\n        }\r\n        return [a0, a1];\r\n    }\r\n\r\n    function expandMsgTo96(bytes32 domain, bytes memory message)\r\n        internal\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        // zero<64>|msg<var>|lib_str<2>|I2OSP(0, 1)<1>|dst<var>|dst_len<1>\r\n        uint256 t0 = message.length;\r\n        bytes memory msg0 = new bytes(32 + t0 + 64 + 4);\r\n        bytes memory out = new bytes(96);\r\n        // b0\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let p := add(msg0, 96)\r\n            for {\r\n                let z := 0\r\n            } lt(z, t0) {\r\n                z := add(z, 32)\r\n            } {\r\n                mstore(add(p, z), mload(add(message, add(z, 32))))\r\n            }\r\n            p := add(p, t0)\r\n\r\n            mstore8(p, 0)\r\n            p := add(p, 1)\r\n            mstore8(p, 96)\r\n            p := add(p, 1)\r\n            mstore8(p, 0)\r\n            p := add(p, 1)\r\n\r\n            mstore(p, domain)\r\n            p := add(p, 32)\r\n            mstore8(p, 32)\r\n        }\r\n        bytes32 b0 = sha256(msg0);\r\n        bytes32 bi;\r\n        t0 = 32 + 34;\r\n\r\n        // resize intermediate message\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            mstore(msg0, t0)\r\n        }\r\n\r\n        // b1\r\n\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            mstore(add(msg0, 32), b0)\r\n            mstore8(add(msg0, 64), 1)\r\n            mstore(add(msg0, 65), domain)\r\n            mstore8(add(msg0, add(32, 65)), 32)\r\n        }\r\n\r\n        bi = sha256(msg0);\r\n\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            mstore(add(out, 32), bi)\r\n        }\r\n\r\n        // b2\r\n\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let t := xor(b0, bi)\r\n            mstore(add(msg0, 32), t)\r\n            mstore8(add(msg0, 64), 2)\r\n            mstore(add(msg0, 65), domain)\r\n            mstore8(add(msg0, add(32, 65)), 32)\r\n        }\r\n\r\n        bi = sha256(msg0);\r\n\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            mstore(add(out, 64), bi)\r\n        }\r\n\r\n        // b3\r\n\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let t := xor(b0, bi)\r\n            mstore(add(msg0, 32), t)\r\n            mstore8(add(msg0, 64), 3)\r\n            mstore(add(msg0, 65), domain)\r\n            mstore8(add(msg0, add(32, 65)), 32)\r\n        }\r\n\r\n        bi = sha256(msg0);\r\n\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            mstore(add(out, 96), bi)\r\n        }\r\n\r\n        return out;\r\n    }\r\n}\r\n"
    },
    "contracts/samples/bls/lib/hubble-contracts/contracts/libs/BNPairingPrecompileCostEstimator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.12;\r\n\r\ncontract BNPairingPrecompileCostEstimator {\r\n    uint256 public baseCost;\r\n    uint256 public perPairCost;\r\n\r\n    // G1 Generator\r\n    uint256 private constant G1_X = 1;\r\n    uint256 private constant G1_Y = 2;\r\n\r\n    // G2 genarator\r\n    // prettier-ignore\r\n    uint256 private constant G2_X0 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\r\n    // prettier-ignore\r\n    uint256 private constant G2_X1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\r\n    // prettier-ignore\r\n    uint256 private constant G2_Y0 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\r\n    // prettier-ignore\r\n    uint256 private constant G2_Y1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\r\n\r\n    // G2 negated genarator y coordinates\r\n    // prettier-ignore\r\n    uint256 private constant N_G2_Y0 = 13392588948715843804641432497768002650278120570034223513918757245338268106653;\r\n    // prettier-ignore\r\n    uint256 private constant N_G2_Y1 = 17805874995975841540914202342111839520379459829704422454583296818431106115052;\r\n\r\n    function run() external {\r\n        _run();\r\n    }\r\n\r\n    function getGasCost(uint256 pairCount) external view returns (uint256) {\r\n        return pairCount * perPairCost + baseCost;\r\n    }\r\n\r\n    function _run() internal {\r\n        uint256 gasCost1Pair = _gasCost1Pair();\r\n        uint256 gasCost2Pair = _gasCost2Pair();\r\n        perPairCost = gasCost2Pair - gasCost1Pair;\r\n        baseCost = gasCost1Pair - perPairCost;\r\n    }\r\n\r\n    function _gasCost1Pair() internal view returns (uint256) {\r\n        uint256[6] memory input = [G1_X, G1_Y, G2_X1, G2_X0, G2_Y1, G2_Y0];\r\n        uint256[1] memory out;\r\n        bool callSuccess;\r\n        uint256 suppliedGas = gasleft() - 2000;\r\n        require(\r\n            gasleft() > 2000,\r\n            \"BNPairingPrecompileCostEstimator: not enough gas, single pair\"\r\n        );\r\n        uint256 gasT0 = gasleft();\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            callSuccess := staticcall(suppliedGas, 8, input, 192, out, 0x20)\r\n        }\r\n        uint256 gasCost = gasT0 - gasleft();\r\n        require(\r\n            callSuccess,\r\n            \"BNPairingPrecompileCostEstimator: single pair call is failed\"\r\n        );\r\n        require(\r\n            out[0] == 0,\r\n            \"BNPairingPrecompileCostEstimator: single pair call result must be 0\"\r\n        );\r\n        return gasCost;\r\n    }\r\n\r\n    function _gasCost2Pair() internal view returns (uint256) {\r\n        uint256[12] memory input =\r\n            [\r\n                G1_X,\r\n                G1_Y,\r\n                G2_X1,\r\n                G2_X0,\r\n                G2_Y1,\r\n                G2_Y0,\r\n                G1_X,\r\n                G1_Y,\r\n                G2_X1,\r\n                G2_X0,\r\n                N_G2_Y1,\r\n                N_G2_Y0\r\n            ];\r\n        uint256[1] memory out;\r\n        bool callSuccess;\r\n        uint256 suppliedGas = gasleft() - 2000;\r\n        require(\r\n            gasleft() > 2000,\r\n            \"BNPairingPrecompileCostEstimator: not enough gas, couple pair\"\r\n        );\r\n        uint256 gasT0 = gasleft();\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            callSuccess := staticcall(suppliedGas, 8, input, 384, out, 0x20)\r\n        }\r\n        uint256 gasCost = gasT0 - gasleft();\r\n        require(\r\n            callSuccess,\r\n            \"BNPairingPrecompileCostEstimator: couple pair call is failed\"\r\n        );\r\n        require(\r\n            out[0] == 1,\r\n            \"BNPairingPrecompileCostEstimator: couple pair call result must be 1\"\r\n        );\r\n        return gasCost;\r\n    }\r\n}\r\n"
    },
    "contracts/samples/bls/lib/hubble-contracts/contracts/libs/ModExp.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >= 0.6.12;\r\n\r\n/**\r\n    @title Compute Inverse by Modular Exponentiation\r\n    @notice Compute $input^(N - 2) mod N$ using Addition Chain method.\r\n    Where     N = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\r\n    and   N - 2 = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd45\r\n    @dev the function body is generated with the modified addchain script\r\n    see https://github.com/kobigurk/addchain/commit/2c37a2ace567a9bdc680b4e929c94aaaa3ec700f\r\n */\r\nlibrary ModexpInverse {\r\n    function run(uint256 t2) internal pure returns (uint256 t0) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let\r\n                n\r\n            := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\r\n            t0 := mulmod(t2, t2, n)\r\n            let t5 := mulmod(t0, t2, n)\r\n            let t1 := mulmod(t5, t0, n)\r\n            let t3 := mulmod(t5, t5, n)\r\n            let t8 := mulmod(t1, t0, n)\r\n            let t4 := mulmod(t3, t5, n)\r\n            let t6 := mulmod(t3, t1, n)\r\n            t0 := mulmod(t3, t3, n)\r\n            let t7 := mulmod(t8, t3, n)\r\n            t3 := mulmod(t4, t3, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t5, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t2, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t2, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t8, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t8, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t2, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t8, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t2, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t5, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t7, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t1, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t5, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t8, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t1, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t2, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t6, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t7, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t1, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t5, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t1, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t5, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t6, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t6, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t1, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t8, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t6, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t1, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t4, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t6, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t2, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t8, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t8, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t1, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t2, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t7, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t3, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t2, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t2, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t5, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t6, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t5, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t5, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t3, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t4, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t3, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t1, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t2, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t1, n)\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n    @title Compute Squre Root by Modular Exponentiation\r\n    @notice Compute $input^{(N + 1) / 4} mod N$ using Addition Chain method.\r\n    Where           N = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\r\n    and   (N + 1) / 4 = 0xc19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52\r\n */\r\nlibrary ModexpSqrt {\r\n    function run(uint256 t6) internal pure returns (uint256 t0) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let\r\n                n\r\n            := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\r\n\r\n            t0 := mulmod(t6, t6, n)\r\n            let t4 := mulmod(t0, t6, n)\r\n            let t2 := mulmod(t4, t0, n)\r\n            let t3 := mulmod(t4, t4, n)\r\n            let t8 := mulmod(t2, t0, n)\r\n            let t1 := mulmod(t3, t4, n)\r\n            let t5 := mulmod(t3, t2, n)\r\n            t0 := mulmod(t3, t3, n)\r\n            let t7 := mulmod(t8, t3, n)\r\n            t3 := mulmod(t1, t3, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t4, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t6, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t6, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t8, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t8, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t6, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t8, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t6, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t4, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t7, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t2, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t4, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t8, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t2, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t6, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t5, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t7, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t2, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t4, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t2, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t4, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t5, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t5, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t2, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t8, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t5, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t2, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t1, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t5, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t6, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t8, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t8, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t2, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t6, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t7, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t3, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t6, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t6, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t4, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t5, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t4, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t4, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t3, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t1, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t3, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t2, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t0, n)\r\n            t0 := mulmod(t0, t1, n)\r\n            t0 := mulmod(t0, t0, n)\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/samples/callback/TokenCallbackHandler.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\n/* solhint-disable no-empty-blocks */\r\n\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\r\n\r\n/**\r\n * Token callback handler.\r\n *   Handles supported tokens' callbacks, allowing account receiving these tokens.\r\n */\r\ncontract TokenCallbackHandler is IERC777Recipient, IERC721Receiver, IERC1155Receiver {\r\n    function tokensReceived(\r\n        address,\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes calldata,\r\n        bytes calldata\r\n    ) external pure override {\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes calldata\r\n    ) external pure override returns (bytes4) {\r\n        return IERC721Receiver.onERC721Received.selector;\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes calldata\r\n    ) external pure override returns (bytes4) {\r\n        return IERC1155Receiver.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] calldata,\r\n        uint256[] calldata,\r\n        bytes calldata\r\n    ) external pure override returns (bytes4) {\r\n        return IERC1155Receiver.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721Receiver).interfaceId ||\r\n            interfaceId == type(IERC1155Receiver).interfaceId ||\r\n            interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n"
    },
    "contracts/samples/DepositPaymaster.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\n/* solhint-disable reason-string */\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nimport \"../core/BasePaymaster.sol\";\r\nimport \"./IOracle.sol\";\r\n\r\n/**\r\n * A token-based paymaster that accepts token deposits\r\n * The deposit is only a safeguard: the user pays with his token balance.\r\n *  only if the user didn't approve() the paymaster, or if the token balance is not enough, the deposit will be used.\r\n *  thus the required deposit is to cover just one method call.\r\n * The deposit is locked for the current block: the user must issue unlockTokenDeposit() to be allowed to withdraw\r\n *  (but can't use the deposit for this or further operations)\r\n *\r\n * paymasterAndData holds the paymaster address followed by the token address to use.\r\n * @notice This paymaster will be rejected by the standard rules of EIP4337, as it uses an external oracle.\r\n * (the standard rules ban accessing data of an external contract)\r\n * It can only be used if it is \"whitelisted\" by the bundler.\r\n * (technically, it can be used by an \"oracle\" which returns a static value, without accessing any storage)\r\n */\r\ncontract DepositPaymaster is BasePaymaster {\r\n\r\n    using UserOperationLib for UserOperation;\r\n    using SafeERC20 for IERC20;\r\n\r\n    //calculated cost of the postOp\r\n    uint256 constant public COST_OF_POST = 35000;\r\n\r\n    IOracle private constant NULL_ORACLE = IOracle(address(0));\r\n    mapping(IERC20 => IOracle) public oracles;\r\n    mapping(IERC20 => mapping(address => uint256)) public balances;\r\n    mapping(address => uint256) public unlockBlock;\r\n\r\n    constructor(IEntryPoint _entryPoint) BasePaymaster(_entryPoint) {\r\n        //owner account is unblocked, to allow withdraw of paid tokens;\r\n        unlockTokenDeposit();\r\n    }\r\n\r\n    /**\r\n     * owner of the paymaster should add supported tokens\r\n     */\r\n    function addToken(IERC20 token, IOracle tokenPriceOracle) external onlyOwner {\r\n        require(oracles[token] == NULL_ORACLE, \"Token already set\");\r\n        oracles[token] = tokenPriceOracle;\r\n    }\r\n\r\n    /**\r\n     * deposit tokens that a specific account can use to pay for gas.\r\n     * The sender must first approve this paymaster to withdraw these tokens (they are only withdrawn in this method).\r\n     * Note depositing the tokens is equivalent to transferring them to the \"account\" - only the account can later\r\n     *  use them - either as gas, or using withdrawTo()\r\n     *\r\n     * @param token the token to deposit.\r\n     * @param account the account to deposit for.\r\n     * @param amount the amount of token to deposit.\r\n     */\r\n    function addDepositFor(IERC20 token, address account, uint256 amount) external {\r\n        //(sender must have approval for the paymaster)\r\n        token.safeTransferFrom(msg.sender, address(this), amount);\r\n        require(oracles[token] != NULL_ORACLE, \"unsupported token\");\r\n        balances[token][account] += amount;\r\n        if (msg.sender == account) {\r\n            lockTokenDeposit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return amount - the amount of given token deposited to the Paymaster.\r\n     * @return _unlockBlock - the block height at which the deposit can be withdrawn.\r\n     */\r\n    function depositInfo(IERC20 token, address account) public view returns (uint256 amount, uint256 _unlockBlock) {\r\n        amount = balances[token][account];\r\n        _unlockBlock = unlockBlock[account];\r\n    }\r\n\r\n    /**\r\n     * unlock deposit, so that it can be withdrawn.\r\n     * can't be called in the same block as withdrawTo()\r\n     */\r\n    function unlockTokenDeposit() public {\r\n        unlockBlock[msg.sender] = block.number;\r\n    }\r\n\r\n    /**\r\n     * lock the tokens deposited for this account so they can be used to pay for gas.\r\n     * after calling unlockTokenDeposit(), the account can't use this paymaster until the deposit is locked.\r\n     */\r\n    function lockTokenDeposit() public {\r\n        unlockBlock[msg.sender] = 0;\r\n    }\r\n\r\n    /**\r\n     * withdraw tokens.\r\n     * can only be called after unlock() is called in a previous block.\r\n     * @param token the token deposit to withdraw\r\n     * @param target address to send to\r\n     * @param amount amount to withdraw\r\n     */\r\n    function withdrawTokensTo(IERC20 token, address target, uint256 amount) public {\r\n        require(unlockBlock[msg.sender] != 0 && block.number > unlockBlock[msg.sender], \"DepositPaymaster: must unlockTokenDeposit\");\r\n        balances[token][msg.sender] -= amount;\r\n        token.safeTransfer(target, amount);\r\n    }\r\n\r\n    /**\r\n     * translate the given eth value to token amount\r\n     * @param token the token to use\r\n     * @param ethBought the required eth value we want to \"buy\"\r\n     * @return requiredTokens the amount of tokens required to get this amount of eth\r\n     */\r\n    function getTokenValueOfEth(IERC20 token, uint256 ethBought) internal view virtual returns (uint256 requiredTokens) {\r\n        IOracle oracle = oracles[token];\r\n        require(oracle != NULL_ORACLE, \"DepositPaymaster: unsupported token\");\r\n        return oracle.getTokenValueOfEth(ethBought);\r\n    }\r\n\r\n    /**\r\n     * Validate the request:\r\n     * The sender should have enough deposit to pay the max possible cost.\r\n     * Note that the sender's balance is not checked. If it fails to pay from its balance,\r\n     * this deposit will be used to compensate the paymaster for the transaction.\r\n     */\r\n    function _validatePaymasterUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 maxCost)\r\n    internal view override returns (bytes memory context, uint256 validationData) {\r\n\r\n        (userOpHash);\r\n        // verificationGasLimit is dual-purposed, as gas limit for postOp. make sure it is high enough\r\n        require(userOp.verificationGasLimit > COST_OF_POST, \"DepositPaymaster: gas too low for postOp\");\r\n\r\n        bytes calldata paymasterAndData = userOp.paymasterAndData;\r\n        require(paymasterAndData.length == 20+20, \"DepositPaymaster: paymasterAndData must specify token\");\r\n        IERC20 token = IERC20(address(bytes20(paymasterAndData[20:])));\r\n        address account = userOp.getSender();\r\n        uint256 maxTokenCost = getTokenValueOfEth(token, maxCost);\r\n        uint256 gasPriceUserOp = userOp.gasPrice();\r\n        require(unlockBlock[account] == 0, \"DepositPaymaster: deposit not locked\");\r\n        require(balances[token][account] >= maxTokenCost, \"DepositPaymaster: deposit too low\");\r\n        return (abi.encode(account, token, gasPriceUserOp, maxTokenCost, maxCost),0);\r\n    }\r\n\r\n    /**\r\n     * perform the post-operation to charge the sender for the gas.\r\n     * in normal mode, use transferFrom to withdraw enough tokens from the sender's balance.\r\n     * in case the transferFrom fails, the _postOp reverts and the entryPoint will call it again,\r\n     * this time in *postOpReverted* mode.\r\n     * In this mode, we use the deposit to pay (which we validated to be large enough)\r\n     */\r\n    function _postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) internal override {\r\n\r\n        (address account, IERC20 token, uint256 gasPricePostOp, uint256 maxTokenCost, uint256 maxCost) = abi.decode(context, (address, IERC20, uint256, uint256, uint256));\r\n        //use same conversion rate as used for validation.\r\n        uint256 actualTokenCost = (actualGasCost + COST_OF_POST * gasPricePostOp) * maxTokenCost / maxCost;\r\n        if (mode != PostOpMode.postOpReverted) {\r\n            // attempt to pay with tokens:\r\n            token.safeTransferFrom(account, address(this), actualTokenCost);\r\n        } else {\r\n            //in case above transferFrom failed, pay with deposit:\r\n            balances[token][account] -= actualTokenCost;\r\n        }\r\n        balances[token][owner()] += actualTokenCost;\r\n    }\r\n}\r\n"
    },
    "contracts/samples/gnosis/EIP4337Fallback.sol": {
      "content": "//SPDX-License-Identifier: GPL\r\npragma solidity ^0.8.7;\r\n\r\n/* solhint-disable no-inline-assembly */\r\n\r\nimport \"@gnosis.pm/safe-contracts/contracts/handler/DefaultCallbackHandler.sol\";\r\nimport \"@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol\";\r\nimport \"@openzeppelin/contracts/interfaces/IERC1271.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"../../interfaces/IAccount.sol\";\r\nimport \"./EIP4337Manager.sol\";\r\n\r\nusing ECDSA for bytes32;\r\n\r\n/**\r\n * The GnosisSafe enables adding custom functions implementation to the Safe by setting a 'fallbackHandler'.\r\n * This 'fallbackHandler' adds an implementation of 'validateUserOp' to the GnosisSafe.\r\n * Note that the implementation of the 'validateUserOp' method is located in the EIP4337Manager.\r\n * Upon receiving the 'validateUserOp', a Safe with EIP4337Fallback enabled makes a 'delegatecall' to EIP4337Manager.\r\n */\r\ncontract EIP4337Fallback is DefaultCallbackHandler, IAccount, IERC1271 {\r\n    bytes4 internal constant ERC1271_MAGIC_VALUE = 0x1626ba7e;\r\n\r\n    address immutable public eip4337manager;\r\n    constructor(address _eip4337manager) {\r\n        eip4337manager = _eip4337manager;\r\n    }\r\n\r\n    /**\r\n     * delegate the contract call to the EIP4337Manager\r\n     */\r\n    function delegateToManager() internal returns (bytes memory) {\r\n        // delegate entire msg.data (including the appended \"msg.sender\") to the EIP4337Manager\r\n        // will work only for GnosisSafe contracts\r\n        GnosisSafe safe = GnosisSafe(payable(msg.sender));\r\n        (bool success, bytes memory ret) = safe.execTransactionFromModuleReturnData(eip4337manager, 0, msg.data, Enum.Operation.DelegateCall);\r\n        if (!success) {\r\n            assembly {\r\n                revert(add(ret, 32), mload(ret))\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * called from the Safe. delegate actual work to EIP4337Manager\r\n     */\r\n    function validateUserOp(UserOperation calldata, bytes32, uint256) override external returns (uint256 deadline){\r\n        bytes memory ret = delegateToManager();\r\n        return abi.decode(ret, (uint256));\r\n    }\r\n\r\n    /**\r\n     * Helper for wallet to get the next nonce.\r\n     */\r\n    function getNonce() public returns (uint256 nonce) {\r\n        bytes memory ret = delegateToManager();\r\n        (nonce) = abi.decode(ret, (uint256));\r\n    }\r\n\r\n    /**\r\n     * called from the Safe. delegate actual work to EIP4337Manager\r\n     */\r\n    function executeAndRevert(\r\n        address,\r\n        uint256,\r\n        bytes memory,\r\n        Enum.Operation\r\n    ) external {\r\n        delegateToManager();\r\n    }\r\n\r\n    function isValidSignature(\r\n        bytes32 _hash,\r\n        bytes memory _signature\r\n    ) external override view returns (bytes4) {\r\n        bytes32 hash = _hash.toEthSignedMessageHash();\r\n        address recovered = hash.recover(_signature);\r\n\r\n        GnosisSafe safe = GnosisSafe(payable(address(msg.sender)));\r\n\r\n        // Validate signatures\r\n        if (safe.isOwner(recovered)) {\r\n            return ERC1271_MAGIC_VALUE;\r\n        } else {\r\n            return 0xffffffff;\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/samples/gnosis/EIP4337Manager.sol": {
      "content": "//SPDX-License-Identifier: GPL\r\npragma solidity ^0.8.7;\r\n\r\n/* solhint-disable avoid-low-level-calls */\r\n/* solhint-disable no-inline-assembly */\r\n/* solhint-disable reason-string */\r\n\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol\";\r\nimport \"@gnosis.pm/safe-contracts/contracts/base/Executor.sol\";\r\nimport \"@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol\";\r\nimport \"./EIP4337Fallback.sol\";\r\nimport \"../../interfaces/IAccount.sol\";\r\nimport \"../../interfaces/IEntryPoint.sol\";\r\nimport \"../../utils/Exec.sol\";\r\n\r\n    using ECDSA for bytes32;\r\n\r\n/**\r\n * Main EIP4337 module.\r\n * Called (through the fallback module) using \"delegate\" from the GnosisSafe as an \"IAccount\",\r\n * so must implement validateUserOp\r\n * holds an immutable reference to the EntryPoint\r\n * Inherits GnosisSafe so that it can reference the memory storage\r\n */\r\ncontract EIP4337Manager is IAccount, GnosisSafeStorage, Executor {\r\n\r\n    address public immutable eip4337Fallback;\r\n    address public immutable entryPoint;\r\n\r\n    // return value in case of signature failure, with no time-range.\r\n    // equivalent to _packValidationData(true,0,0);\r\n    uint256 constant internal SIG_VALIDATION_FAILED = 1;\r\n\r\n    address internal constant SENTINEL_MODULES = address(0x1);\r\n\r\n    constructor(address anEntryPoint) {\r\n        entryPoint = anEntryPoint;\r\n        eip4337Fallback = address(new EIP4337Fallback(address(this)));\r\n    }\r\n\r\n    /**\r\n     * delegate-called (using execFromModule) through the fallback, so \"real\" msg.sender is attached as last 20 bytes\r\n     */\r\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\r\n    external override returns (uint256 validationData) {\r\n        address msgSender = address(bytes20(msg.data[msg.data.length - 20 :]));\r\n        require(msgSender == entryPoint, \"account: not from entrypoint\");\r\n\r\n        GnosisSafe pThis = GnosisSafe(payable(address(this)));\r\n        bytes32 hash = userOpHash.toEthSignedMessageHash();\r\n        address recovered = hash.recover(userOp.signature);\r\n        require(threshold == 1, \"account: only threshold 1\");\r\n        if (!pThis.isOwner(recovered)) {\r\n            validationData = SIG_VALIDATION_FAILED;\r\n        }\r\n\r\n        // mimic normal Safe nonce behaviour: prevent parallel nonces\r\n        require(userOp.nonce < type(uint64).max, \"account: nonsequential nonce\");\r\n\r\n        if (missingAccountFunds > 0) {\r\n            //Note: MAY pay more than the minimum, to deposit for future transactions\r\n            (bool success,) = payable(msgSender).call{value : missingAccountFunds}(\"\");\r\n            (success);\r\n            //ignore failure (its EntryPoint's job to verify, not account.)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute a call but also revert if the execution fails.\r\n     * The default behavior of the Safe is to not revert if the call fails,\r\n     * which is challenging for integrating with ERC4337 because then the\r\n     * EntryPoint wouldn't know to emit the UserOperationRevertReason event,\r\n     * which the frontend/client uses to capture the reason for the failure.\r\n     */\r\n    function executeAndRevert(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation\r\n    ) external {\r\n        address msgSender = address(bytes20(msg.data[msg.data.length - 20 :]));\r\n        require(msgSender == entryPoint, \"account: not from entrypoint\");\r\n        require(msg.sender == eip4337Fallback, \"account: not from EIP4337Fallback\");\r\n\r\n        bool success = execute(\r\n            to,\r\n            value,\r\n            data,\r\n            operation,\r\n            type(uint256).max\r\n        );\r\n\r\n        bytes memory returnData = Exec.getReturnData(type(uint256).max);\r\n        // Revert with the actual reason string\r\n        // Adopted from: https://github.com/Uniswap/v3-periphery/blob/464a8a49611272f7349c970e0fadb7ec1d3c1086/contracts/base/Multicall.sol#L16-L23\r\n        if (!success) {\r\n            if (returnData.length < 68) revert();\r\n            assembly {\r\n                returnData := add(returnData, 0x04)\r\n            }\r\n            revert(abi.decode(returnData, (string)));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper for wallet to get the next nonce.\r\n     */\r\n    function getNonce() public view returns (uint256) {\r\n        return IEntryPoint(entryPoint).getNonce(address(this), 0);\r\n    }\r\n\r\n    /**\r\n     * set up a safe as EIP-4337 enabled.\r\n     * called from the GnosisSafeAccountFactory during construction time\r\n     * - enable 3 modules (this module, fallback and the entrypoint)\r\n     * - this method is called with delegateCall, so the module (usually itself) is passed as parameter, and \"this\" is the safe itself\r\n     */\r\n    function setup4337Modules(\r\n        EIP4337Manager manager //the manager (this contract)\r\n    ) external {\r\n        GnosisSafe safe = GnosisSafe(payable(address(this)));\r\n        require(!safe.isModuleEnabled(manager.entryPoint()), \"setup4337Modules: entrypoint already enabled\");\r\n        require(!safe.isModuleEnabled(manager.eip4337Fallback()), \"setup4337Modules: eip4337Fallback already enabled\");\r\n        safe.enableModule(manager.entryPoint());\r\n        safe.enableModule(manager.eip4337Fallback());\r\n    }\r\n\r\n    /**\r\n     * replace EIP4337 module, to support a new EntryPoint.\r\n     * must be called using execTransaction and Enum.Operation.DelegateCall\r\n     * @param prevModule returned by getCurrentEIP4337Manager\r\n     * @param oldManager the old EIP4337 manager to remove, returned by getCurrentEIP4337Manager\r\n     * @param newManager the new EIP4337Manager, usually with a new EntryPoint\r\n     */\r\n    function replaceEIP4337Manager(address prevModule, EIP4337Manager oldManager, EIP4337Manager newManager) public {\r\n        GnosisSafe pThis = GnosisSafe(payable(address(this)));\r\n        address oldFallback = oldManager.eip4337Fallback();\r\n        require(pThis.isModuleEnabled(oldFallback), \"replaceEIP4337Manager: oldManager is not active\");\r\n        pThis.disableModule(oldFallback, oldManager.entryPoint());\r\n        pThis.disableModule(prevModule, oldFallback);\r\n\r\n        address eip4337fallback = newManager.eip4337Fallback();\r\n\r\n        pThis.enableModule(newManager.entryPoint());\r\n        pThis.enableModule(eip4337fallback);\r\n        pThis.setFallbackHandler(eip4337fallback);\r\n\r\n        validateEip4337(pThis, newManager);\r\n    }\r\n\r\n    /**\r\n     * Validate this gnosisSafe is callable through the EntryPoint.\r\n     * the test is might be incomplete: we check that we reach our validateUserOp and fail on signature.\r\n     *  we don't test full transaction\r\n     */\r\n    function validateEip4337(GnosisSafe safe, EIP4337Manager manager) public {\r\n\r\n        // this prevents mistaken replaceEIP4337Manager to disable the module completely.\r\n        // minimal signature that pass \"recover\"\r\n        bytes memory sig = new bytes(65);\r\n        sig[64] = bytes1(uint8(27));\r\n        sig[2] = bytes1(uint8(1));\r\n        sig[35] = bytes1(uint8(1));\r\n        uint256 nonce = uint256(IEntryPoint(manager.entryPoint()).getNonce(address(safe), 0));\r\n        UserOperation memory userOp = UserOperation(address(safe), nonce, \"\", \"\", 0, 1000000, 0, 0, 0, \"\", sig);\r\n        UserOperation[] memory userOps = new UserOperation[](1);\r\n        userOps[0] = userOp;\r\n        IEntryPoint _entryPoint = IEntryPoint(payable(manager.entryPoint()));\r\n        try _entryPoint.handleOps(userOps, payable(msg.sender)) {\r\n            revert(\"validateEip4337: handleOps must fail\");\r\n        } catch (bytes memory error) {\r\n            if (keccak256(error) != keccak256(abi.encodeWithSignature(\"FailedOp(uint256,string)\", 0, \"AA24 signature error\"))) {\r\n                revert(string(error));\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * enumerate modules, and find the currently active EIP4337 manager (and previous module)\r\n     * @return prev prev module, needed by replaceEIP4337Manager\r\n     * @return manager the current active EIP4337Manager\r\n     */\r\n    function getCurrentEIP4337Manager(GnosisSafe safe) public view returns (address prev, address manager) {\r\n        prev = address(SENTINEL_MODULES);\r\n        (address[] memory modules,) = safe.getModulesPaginated(SENTINEL_MODULES, 100);\r\n        for (uint i = 0; i < modules.length; i++) {\r\n            address module = modules[i];\r\n            try EIP4337Fallback(module).eip4337manager() returns (address _manager) {\r\n                return (prev, _manager);\r\n            }\r\n            // solhint-disable-next-line no-empty-blocks\r\n            catch {}\r\n            prev = module;\r\n        }\r\n        return (address(0), address(0));\r\n    }\r\n}\r\n"
    },
    "contracts/samples/gnosis/GnosisAccountFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\nimport \"@openzeppelin/contracts/utils/Create2.sol\";\r\nimport \"@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxyFactory.sol\";\r\nimport \"./EIP4337Manager.sol\";\r\n\r\n/**\r\n * A wrapper factory contract to deploy GnosisSafe as an ERC-4337 account contract.\r\n */\r\ncontract GnosisSafeAccountFactory {\r\n\r\n    GnosisSafeProxyFactory public immutable proxyFactory;\r\n    address public immutable safeSingleton;\r\n    EIP4337Manager public immutable eip4337Manager;\r\n\r\n    constructor(GnosisSafeProxyFactory _proxyFactory, address _safeSingleton, EIP4337Manager _eip4337Manager) {\r\n        proxyFactory = _proxyFactory;\r\n        safeSingleton = _safeSingleton;\r\n        eip4337Manager = _eip4337Manager;\r\n    }\r\n\r\n    function createAccount(address owner,uint256 salt) public returns (address) {\r\n        address addr = getAddress(owner, salt);\r\n        uint codeSize = addr.code.length;\r\n        if (codeSize > 0) {\r\n            return addr;\r\n        }\r\n        return address(proxyFactory.createProxyWithNonce(\r\n                safeSingleton, getInitializer(owner), salt));\r\n    }\r\n\r\n    function getInitializer(address owner) internal view returns (bytes memory) {\r\n        address[] memory owners = new address[](1);\r\n        owners[0] = owner;\r\n        uint threshold = 1;\r\n        address eip4337fallback = eip4337Manager.eip4337Fallback();\r\n\r\n        bytes memory setup4337Modules = abi.encodeCall(\r\n            EIP4337Manager.setup4337Modules, (eip4337Manager));\r\n\r\n        return abi.encodeCall(GnosisSafe.setup, (\r\n            owners, threshold,\r\n            address (eip4337Manager), setup4337Modules,\r\n            eip4337fallback,\r\n            address(0), 0, payable(0) //no payment receiver\r\n            ));\r\n    }\r\n\r\n    /**\r\n     * calculate the counterfactual address of this account as it would be returned by createAccount()\r\n     * (uses the same \"create2 signature\" used by GnosisSafeProxyFactory.createProxyWithNonce)\r\n     */\r\n    function getAddress(address owner,uint256 salt) public view returns (address) {\r\n        bytes memory initializer = getInitializer(owner);\r\n        //copied from deployProxyWithNonce\r\n        bytes32 salt2 = keccak256(abi.encodePacked(keccak256(initializer), salt));\r\n        bytes memory deploymentData = abi.encodePacked(proxyFactory.proxyCreationCode(), uint256(uint160(safeSingleton)));\r\n        return Create2.computeAddress(bytes32(salt2), keccak256(deploymentData), address (proxyFactory));\r\n    }\r\n}\r\n"
    },
    "contracts/samples/Guardian.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\nimport \"../interfaces/IAccount.sol\";\r\nimport \"../interfaces/ITSPAccount.sol\";\r\nimport \"../interfaces/IGuardian.sol\";\r\n\r\ncontract Guardian is IGuardian {\r\n    using SafeMath for uint256;\r\n    // address public owner;\r\n    mapping(address => IGuardian.GuardianConfig) private _cabinet;\r\n    mapping(address => mapping(address => address)) private _approvesProgress;\r\n    mapping(address => uint256) private _closestReset;\r\n\r\n    function setConfig(\r\n        address account,\r\n        IGuardian.GuardianConfig memory config\r\n    ) public {\r\n        _requireAccountOwner(account);\r\n        // Check the legality of the configuration\r\n        require(\r\n            config.approveThreshold > 0 && config.approveThreshold <= 100,\r\n            \"The threshold value must be a value greater than 0 and less than or equal to 100\"\r\n        );\r\n        require(config.guardians.length <= 5, \"Up to 5 guardians\");\r\n        require(\r\n            config.delay > 0,\r\n            \"the number of delayed verification blocks 0 must be greater than or equal to 1\"\r\n        );\r\n        _cabinet[account] = config;\r\n        emit ChangeGuardianConfig(\r\n            account,\r\n            _cabinet[account].guardians,\r\n            _cabinet[account].approveThreshold,\r\n            _cabinet[account].delay\r\n        );\r\n    }\r\n\r\n    // Owner authorized to modify the wallet\r\n    function approve(address account, address newAddress) public {\r\n        // Whether the verification is the guardian of the current account\r\n        require(newAddress != address(0), \"new owner is the zero address\");\r\n        require(\r\n            isAddressInArray(_cabinet[account].guardians, msg.sender),\r\n            \"you are not a guardian\"\r\n        );\r\n        IGuardian.GuardianConfig memory config = _cabinet[account];\r\n        for (uint256 i = 0; i < config.guardians.length; i++) {\r\n            address guardian = config.guardians[i];\r\n            address otherGuardianAddress = _approvesProgress[account][guardian];\r\n            // Check the guardian to assist in the designated EOA consistent\r\n            if (\r\n                otherGuardianAddress != address(0) &&\r\n                otherGuardianAddress != newAddress\r\n            ) {\r\n                // Remove other addresses that are inconsistent with the current guardian\r\n                delete _approvesProgress[account][guardian];\r\n            }\r\n        }\r\n        _approvesProgress[account][msg.sender] = newAddress;\r\n        _closestReset[account] = block.number + _cabinet[account].delay;\r\n        emit Approved(account, msg.sender, newAddress);\r\n    }\r\n\r\n    function resetAccountOwner(address account) public {\r\n        (address newAddress, uint256 progress) = _getApproveProgress(account);\r\n        if (progress > _cabinet[account].approveThreshold) {\r\n            if (_closestReset[account] > block.number) {\r\n                revert(\"the delay reset time has not yet reached\");\r\n            }\r\n            delete _closestReset[account];\r\n            _resetAccountOwner(account, newAddress);\r\n        } else {\r\n            revert(\"the threshold value has not been reached\");\r\n        }\r\n    }\r\n\r\n    function _resetAccountOwner(address account, address newAddress) private {\r\n        ITSPAccount(account).resetOwner(newAddress);\r\n        // Clear authorization record\r\n        _clearApproves(account);\r\n    }\r\n\r\n    function clearApproves(address account) public {\r\n        _requireAccountOwner(account);\r\n        delete _closestReset[account];\r\n        _clearApproves(account);\r\n    }\r\n\r\n    function _clearApproves(address account) private {\r\n        IGuardian.GuardianConfig memory config = _cabinet[account];\r\n        for (uint256 i = 0; i < config.guardians.length; i++) {\r\n            address guardian = config.guardians[i];\r\n            if (_approvesProgress[account][guardian] != address(0)) {\r\n                delete _approvesProgress[account][guardian];\r\n            }\r\n        }\r\n    }\r\n\r\n    function getApproveProgress(\r\n        address account\r\n    ) public view returns (address newAddress, uint256 progress) {\r\n        return _getApproveProgress(account);\r\n    }\r\n\r\n    function _getApproveProgress(\r\n        address account\r\n    ) private view returns (address first, uint256 progress) {\r\n        IGuardian.GuardianConfig memory config = _cabinet[account];\r\n        // if (config.guardians.length > 0) {\r\n        //     return 0;\r\n        // }\r\n        uint256 n = 0;\r\n        for (uint256 i = 0; i < config.guardians.length; i++) {\r\n            address guardian = config.guardians[i];\r\n            address addr = _approvesProgress[account][guardian];\r\n            // Check the guardian to assist in the designated EOA consistent\r\n            if (first == address(0) && addr != address(0)) {\r\n                first = addr;\r\n            }\r\n            if (addr != address(0) && addr == first) {\r\n                n += 1;\r\n            }\r\n        }\r\n        return (first, n.mul(100).div(config.guardians.length));\r\n    }\r\n\r\n    function isAddressInArray(\r\n        address[] memory addresses,\r\n        address target\r\n    ) public pure returns (bool) {\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            if (addresses[i] == target) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Require the function call went through EntryPoint or owner\r\n    function _requireAccountOwner(address account) internal view {\r\n        require(\r\n            msg.sender == account ||\r\n                msg.sender == Ownable(payable(account)).owner(),\r\n            \"account: not the account owner\"\r\n        );\r\n    }\r\n\r\n    function getGuardianConfig(\r\n        address account\r\n    ) public view returns (IGuardian.GuardianConfig memory config) {\r\n        return _cabinet[account];\r\n    }\r\n}\r\n"
    },
    "contracts/samples/IOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\ninterface IOracle {\r\n\r\n    /**\r\n     * return amount of tokens that are required to receive that much eth.\r\n     */\r\n    function getTokenValueOfEth(uint256 ethOutput) external view returns (uint256 tokenInput);\r\n}\r\n\r\n"
    },
    "contracts/samples/SimpleAccount.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\n/* solhint-disable avoid-low-level-calls */\r\n/* solhint-disable no-inline-assembly */\r\n/* solhint-disable reason-string */\r\n\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\";\r\n\r\nimport \"../core/BaseAccount.sol\";\r\nimport \"./callback/TokenCallbackHandler.sol\";\r\n\r\n/**\r\n  * minimal account.\r\n  *  this is sample minimal account.\r\n  *  has execute, eth handling methods\r\n  *  has a single signer that can send requests through the entryPoint.\r\n  */\r\ncontract SimpleAccount is BaseAccount, TokenCallbackHandler, UUPSUpgradeable, Initializable {\r\n    using ECDSA for bytes32;\r\n\r\n    address public owner;\r\n\r\n    IEntryPoint private immutable _entryPoint;\r\n\r\n    event SimpleAccountInitialized(IEntryPoint indexed entryPoint, address indexed owner);\r\n\r\n    modifier onlyOwner() {\r\n        _onlyOwner();\r\n        _;\r\n    }\r\n\r\n    /// @inheritdoc BaseAccount\r\n    function entryPoint() public view virtual override returns (IEntryPoint) {\r\n        return _entryPoint;\r\n    }\r\n\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    receive() external payable {}\r\n\r\n    constructor(IEntryPoint anEntryPoint) {\r\n        _entryPoint = anEntryPoint;\r\n        _disableInitializers();\r\n    }\r\n\r\n    function _onlyOwner() internal view {\r\n        //directly from EOA owner, or through the account itself (which gets redirected through execute())\r\n        require(msg.sender == owner || msg.sender == address(this), \"only owner\");\r\n    }\r\n\r\n    /**\r\n     * execute a transaction (called directly from owner, or by entryPoint)\r\n     */\r\n    function execute(address dest, uint256 value, bytes calldata func) external virtual {\r\n        _requireFromEntryPointOrOwner();\r\n        _call(dest, value, func);\r\n    }\r\n\r\n    /**\r\n     * execute a sequence of transactions\r\n     */\r\n    function executeBatch(address[] calldata dest, bytes[] calldata func) external virtual{\r\n        _requireFromEntryPointOrOwner();\r\n        require(dest.length == func.length, \"wrong array lengths\");\r\n        for (uint256 i = 0; i < dest.length; i++) {\r\n            _call(dest[i], 0, func[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev The _entryPoint member is immutable, to reduce gas consumption.  To upgrade EntryPoint,\r\n     * a new implementation of SimpleAccount must be deployed with the new EntryPoint address, then upgrading\r\n      * the implementation by calling `upgradeTo()`\r\n     */\r\n    function initialize(address anOwner) public virtual initializer {\r\n        _initialize(anOwner);\r\n    }\r\n\r\n    function _initialize(address anOwner) internal virtual {\r\n        owner = anOwner;\r\n        emit SimpleAccountInitialized(_entryPoint, owner);\r\n    }\r\n\r\n    // Require the function call went through EntryPoint or owner\r\n    function _requireFromEntryPointOrOwner() internal view {\r\n        require(msg.sender == address(entryPoint()) || msg.sender == owner, \"account: not Owner or EntryPoint\");\r\n    }\r\n\r\n    /// implement template method of BaseAccount\r\n    function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash)\r\n    internal override virtual returns (uint256 validationData) {\r\n        bytes32 hash = userOpHash.toEthSignedMessageHash();\r\n        if (owner != hash.recover(userOp.signature))\r\n            return SIG_VALIDATION_FAILED;\r\n        return 0;\r\n    }\r\n\r\n    function _call(address target, uint256 value, bytes memory data) internal {\r\n        (bool success, bytes memory result) = target.call{value : value}(data);\r\n        if (!success) {\r\n            assembly {\r\n                revert(add(result, 32), mload(result))\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * check current account deposit in the entryPoint\r\n     */\r\n    function getDeposit() public view returns (uint256) {\r\n        return entryPoint().balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * deposit more funds for this account in the entryPoint\r\n     */\r\n    function addDeposit() public payable {\r\n        entryPoint().depositTo{value : msg.value}(address(this));\r\n    }\r\n\r\n    /**\r\n     * withdraw value from the account's deposit\r\n     * @param withdrawAddress target to send to\r\n     * @param amount to withdraw\r\n     */\r\n    function withdrawDepositTo(address payable withdrawAddress, uint256 amount) public onlyOwner {\r\n        entryPoint().withdrawTo(withdrawAddress, amount);\r\n    }\r\n\r\n    function _authorizeUpgrade(address newImplementation) internal view override {\r\n        (newImplementation);\r\n        _onlyOwner();\r\n    }\r\n}\r\n\r\n"
    },
    "contracts/samples/SimpleAccountFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\nimport \"@openzeppelin/contracts/utils/Create2.sol\";\r\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\r\n\r\nimport \"./SimpleAccount.sol\";\r\n\r\n/**\r\n * A sample factory contract for SimpleAccount\r\n * A UserOperations \"initCode\" holds the address of the factory, and a method call (to createAccount, in this sample factory).\r\n * The factory's createAccount returns the target account address even if it is already installed.\r\n * This way, the entryPoint.getSenderAddress() can be called either before or after the account is created.\r\n */\r\ncontract SimpleAccountFactory {\r\n    SimpleAccount public immutable accountImplementation;\r\n\r\n    constructor(IEntryPoint _entryPoint) {\r\n        accountImplementation = new SimpleAccount(_entryPoint);\r\n    }\r\n\r\n    /**\r\n     * create an account, and return its address.\r\n     * returns the address even if the account is already deployed.\r\n     * Note that during UserOperation execution, this method is called only if the account is not deployed.\r\n     * This method returns an existing account address so that entryPoint.getSenderAddress() would work even after account creation\r\n     */\r\n    function createAccount(address owner,uint256 salt) public returns (SimpleAccount ret) {\r\n        address addr = getAddress(owner, salt);\r\n        uint codeSize = addr.code.length;\r\n        if (codeSize > 0) {\r\n            return SimpleAccount(payable(addr));\r\n        }\r\n        ret = SimpleAccount(payable(new ERC1967Proxy{salt : bytes32(salt)}(\r\n                address(accountImplementation),\r\n                abi.encodeCall(SimpleAccount.initialize, (owner))\r\n            )));\r\n    }\r\n\r\n    /**\r\n     * calculate the counterfactual address of this account as it would be returned by createAccount()\r\n     */\r\n    function getAddress(address owner,uint256 salt) public view returns (address) {\r\n        return Create2.computeAddress(bytes32(salt), keccak256(abi.encodePacked(\r\n                type(ERC1967Proxy).creationCode,\r\n                abi.encode(\r\n                    address(accountImplementation),\r\n                    abi.encodeCall(SimpleAccount.initialize, (owner))\r\n                )\r\n            )));\r\n    }\r\n}\r\n"
    },
    "contracts/samples/TokenPaymaster.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\n/* solhint-disable reason-string */\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"../core/BasePaymaster.sol\";\r\n\r\n/**\r\n * A sample paymaster that defines itself as a token to pay for gas.\r\n * The paymaster IS the token to use, since a paymaster cannot use an external contract.\r\n * Also, the exchange rate has to be fixed, since it can't reference an external Uniswap or other exchange contract.\r\n * subclass should override \"getTokenValueOfEth\" to provide actual token exchange rate, settable by the owner.\r\n * Known Limitation: this paymaster is exploitable when put into a batch with multiple ops (of different accounts):\r\n * - while a single op can't exploit the paymaster (if postOp fails to withdraw the tokens, the user's op is reverted,\r\n *   and then we know we can withdraw the tokens), multiple ops with different senders (all using this paymaster)\r\n *   in a batch can withdraw funds from 2nd and further ops, forcing the paymaster itself to pay (from its deposit)\r\n * - Possible workarounds are either use a more complex paymaster scheme (e.g. the DepositPaymaster) or\r\n *   to whitelist the account and the called method ids.\r\n */\r\ncontract TokenPaymaster is BasePaymaster, ERC20 {\r\n\r\n    //calculated cost of the postOp\r\n    uint256 constant public COST_OF_POST = 15000;\r\n\r\n    address public immutable theFactory;\r\n\r\n    constructor(address accountFactory, string memory _symbol, IEntryPoint _entryPoint) ERC20(_symbol, _symbol) BasePaymaster(_entryPoint) {\r\n        theFactory = accountFactory;\r\n        //make it non-empty\r\n        _mint(address(this), 1);\r\n\r\n        //owner is allowed to withdraw tokens from the paymaster's balance\r\n        _approve(address(this), msg.sender, type(uint).max);\r\n    }\r\n\r\n\r\n    /**\r\n     * helpers for owner, to mint and withdraw tokens.\r\n     * @param recipient - the address that will receive the minted tokens.\r\n     * @param amount - the amount it will receive.\r\n     */\r\n    function mintTokens(address recipient, uint256 amount) external onlyOwner {\r\n        _mint(recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * transfer paymaster ownership.\r\n     * owner of this paymaster is allowed to withdraw funds (tokens transferred to this paymaster's balance)\r\n     * when changing owner, the old owner's withdrawal rights are revoked.\r\n     */\r\n    function transferOwnership(address newOwner) public override virtual onlyOwner {\r\n        // remove allowance of current owner\r\n        _approve(address(this), owner(), 0);\r\n        super.transferOwnership(newOwner);\r\n        // new owner is allowed to withdraw tokens from the paymaster's balance\r\n        _approve(address(this), newOwner, type(uint).max);\r\n    }\r\n\r\n    //Note: this method assumes a fixed ratio of token-to-eth. subclass should override to supply oracle\r\n    // or a setter.\r\n    function getTokenValueOfEth(uint256 valueEth) internal view virtual returns (uint256 valueToken) {\r\n        return valueEth / 100;\r\n    }\r\n\r\n    /**\r\n      * validate the request:\r\n      * if this is a constructor call, make sure it is a known account.\r\n      * verify the sender has enough tokens.\r\n      * (since the paymaster is also the token, there is no notion of \"approval\")\r\n      */\r\n    function _validatePaymasterUserOp(UserOperation calldata userOp, bytes32 /*userOpHash*/, uint256 requiredPreFund)\r\n    internal view override returns (bytes memory context, uint256 validationData) {\r\n        uint256 tokenPrefund = getTokenValueOfEth(requiredPreFund);\r\n\r\n        // verificationGasLimit is dual-purposed, as gas limit for postOp. make sure it is high enough\r\n        // make sure that verificationGasLimit is high enough to handle postOp\r\n        require(userOp.verificationGasLimit > COST_OF_POST, \"TokenPaymaster: gas too low for postOp\");\r\n\r\n        if (userOp.initCode.length != 0) {\r\n            _validateConstructor(userOp);\r\n            require(balanceOf(userOp.sender) >= tokenPrefund, \"TokenPaymaster: no balance (pre-create)\");\r\n        } else {\r\n\r\n            require(balanceOf(userOp.sender) >= tokenPrefund, \"TokenPaymaster: no balance\");\r\n        }\r\n\r\n        return (abi.encode(userOp.sender), 0);\r\n    }\r\n\r\n    // when constructing an account, validate constructor code and parameters\r\n    // we trust our factory (and that it doesn't have any other public methods)\r\n    function _validateConstructor(UserOperation calldata userOp) internal virtual view {\r\n        address factory = address(bytes20(userOp.initCode[0 : 20]));\r\n        require(factory == theFactory, \"TokenPaymaster: wrong account factory\");\r\n    }\r\n\r\n    /**\r\n     * actual charge of user.\r\n     * this method will be called just after the user's TX with mode==OpSucceeded|OpReverted (account pays in both cases)\r\n     * BUT: if the user changed its balance in a way that will cause  postOp to revert, then it gets called again, after reverting\r\n     * the user's TX , back to the state it was before the transaction started (before the validatePaymasterUserOp),\r\n     * and the transaction should succeed there.\r\n     */\r\n    function _postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) internal override {\r\n        //we don't really care about the mode, we just pay the gas with the user's tokens.\r\n        (mode);\r\n        address sender = abi.decode(context, (address));\r\n        uint256 charge = getTokenValueOfEth(actualGasCost + COST_OF_POST);\r\n        //actualGasCost is known to be no larger than the above requiredPreFund, so the transfer should succeed.\r\n        _transfer(sender, address(this), charge);\r\n    }\r\n}\r\n"
    },
    "contracts/samples/TSPAccount.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\n/* solhint-disable avoid-low-level-calls */\r\n/* solhint-disable no-inline-assembly */\r\n/* solhint-disable reason-string */\r\n\r\nimport \"../interfaces/ITSPAccount.sol\";\r\nimport \"./SimpleAccount.sol\";\r\nimport \"../interfaces/IGuardian.sol\";\r\n\r\n/**\r\n * minimal account.\r\n *  this is sample minimal account.\r\n *  has execute, eth handling methods\r\n *  has a single signer that can send requests through the entryPoint.\r\n */\r\ncontract TSPAccount is SimpleAccount, ITSPAccount {\r\n    // the operator can invoke the contract, but cannot modify the owner\r\n    address private _operator;\r\n\r\n    // a guardian contract through which the owner can modify the guardian and multi-signature rules\r\n    address private _guardian;\r\n\r\n    mapping(string => string) private _metadata;\r\n\r\n    constructor(IEntryPoint anEntryPoint) SimpleAccount(anEntryPoint) {}\r\n\r\n    function resetOwner(address newOwner) public {\r\n        require(newOwner != address(0), \"new owner is the zero address\");\r\n        _requireOwnerOrGuardian();\r\n        owner = newOwner;\r\n        emit ResetOwner(address(this), owner, newOwner);\r\n    }\r\n\r\n    function changeOperator(address operator) public onlyOwner {\r\n        // require(operator != address(0), \"operator is the zero address\");\r\n        // _requireFromEntryPointOrOwner();\r\n        _operator = operator;\r\n    }\r\n\r\n    function getGuardian() public view returns (address) {\r\n        return _guardian;\r\n    }\r\n\r\n    function getOperator() public view returns (address) {\r\n        return _operator;\r\n    }\r\n\r\n    function _requireOwnerOrGuardian() internal view {\r\n        require(\r\n            msg.sender == owner || msg.sender == _guardian,\r\n            \"account: not Owner or Guardian\"\r\n        );\r\n    }\r\n\r\n    // Require the function call went through EntryPoint or owner or operator\r\n    function _requireFromEntryPointOrOwnerOrOperator() internal view {\r\n        require(\r\n            msg.sender == address(entryPoint()) ||\r\n                msg.sender == owner ||\r\n                msg.sender == _operator,\r\n            \"account: not Owner or EntryPoint or Operator\"\r\n        );\r\n    }\r\n\r\n    // Save the user's customized data\r\n    function setMetadata(\r\n        string memory key,\r\n        string memory value\r\n    ) public onlyOwner {\r\n        bytes memory bytesStr = bytes(value);\r\n        if (bytesStr.length == 0) {\r\n            delete _metadata[key];\r\n        }\r\n        _metadata[key] = value;\r\n    }\r\n\r\n    // Get user custom data\r\n    function getMetadata(\r\n        string memory key\r\n    ) public view onlyOwner returns (string memory value) {\r\n        value = _metadata[key];\r\n        if (bytes(value).length == 0) {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev The _entryPoint member is immutable, to reduce gas consumption.  To upgrade EntryPoint,\r\n     * a new implementation of SimpleAccount must be deployed with the new EntryPoint address, then upgrading\r\n     * the implementation by calling `upgradeTo()`\r\n     */\r\n    function initialize(\r\n        address anOwner,\r\n        address guardian,\r\n        uint256 threshold,\r\n        uint256 guardianDelay,\r\n        address[] memory guardians\r\n    ) public initializer {\r\n        _initialize(anOwner);\r\n        _changeGuardian(guardian);\r\n        IGuardian(_guardian).setConfig(\r\n            address(this),\r\n            IGuardian.GuardianConfig(guardians, threshold, guardianDelay)\r\n        );\r\n    }\r\n\r\n    function changeGuardian(address guardian) public onlyOwner {\r\n        _changeGuardian(guardian);\r\n    }\r\n\r\n    function _changeGuardian(address guardian) internal {\r\n        require(guardian != address(0), \"guardian is the zero address\");\r\n        _guardian = guardian;\r\n    }\r\n\r\n    /**\r\n     * execute a transaction (called directly from owner, or by entryPoint)\r\n     */\r\n    function execute(\r\n        address dest,\r\n        uint256 value,\r\n        bytes calldata func\r\n    ) external override {\r\n        _requireFromEntryPointOrOwnerOrOperator();\r\n        _call(dest, value, func);\r\n    }\r\n\r\n    /**\r\n     * execute a sequence of transactions\r\n     */\r\n    function executeBatch(\r\n        address[] calldata dest,\r\n        bytes[] calldata func\r\n    ) external override {\r\n        _requireFromEntryPointOrOwnerOrOperator();\r\n        require(dest.length == func.length, \"wrong array lengths\");\r\n        for (uint256 i = 0; i < dest.length; i++) {\r\n            _call(dest[i], 0, func[i]);\r\n        }\r\n    }\r\n\r\n    function getVersion() public pure virtual returns (uint) {\r\n        return 1;\r\n    }\r\n}\r\n"
    },
    "contracts/samples/TSPAccountFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\nimport \"@openzeppelin/contracts/utils/Create2.sol\";\r\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\r\n\r\nimport \"./TSPAccount.sol\";\r\nimport \"./Guardian.sol\";\r\n\r\n/**\r\n * A sample factory contract for SimpleAccount\r\n * A UserOperations \"initCode\" holds the address of the factory, and a method call (to createAccount, in this sample factory).\r\n * The factory's createAccount returns the target account address even if it is already installed.\r\n * This way, the entryPoint.getSenderAddress() can be called either before or after the account is created.\r\n */\r\ncontract TSPAccountFactory {\r\n    TSPAccount public immutable accountImplementation;\r\n\r\n    constructor(IEntryPoint _entryPoint) {\r\n        accountImplementation = new TSPAccount(_entryPoint);\r\n    }\r\n\r\n    /**\r\n     * create an account, and return its address.\r\n     * returns the address even if the account is already deployed.\r\n     * Note that during UserOperation execution, this method is called only if the account is not deployed.\r\n     * This method returns an existing account address so that entryPoint.getSenderAddress() would work even after account creation\r\n     */\r\n    function createAccount(\r\n        address owner,\r\n        uint256 salt,\r\n        address guardian,\r\n        uint256 threshold,\r\n        uint256 guardianDelay,\r\n        address[] memory guardians\r\n    ) public returns (TSPAccount ret) {\r\n        address addr = getAddress(\r\n            owner,\r\n            salt,\r\n            guardian,\r\n            threshold,\r\n            guardianDelay,\r\n            guardians\r\n        );\r\n        uint codeSize = addr.code.length;\r\n        if (codeSize > 0) {\r\n            return TSPAccount(payable(addr));\r\n        }\r\n\r\n        ret = TSPAccount(\r\n            payable(\r\n                new ERC1967Proxy{salt: bytes32(salt)}(\r\n                    address(accountImplementation),\r\n                    abi.encodeCall(\r\n                        TSPAccount.initialize,\r\n                        (owner, guardian, threshold, guardianDelay, guardians)\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * calculate the counterfactual address of this account as it would be returned by createAccount()\r\n     */\r\n    function getAddress(\r\n        address owner,\r\n        uint256 salt,\r\n        address guardian,\r\n        uint256 threshold,\r\n        uint256 guardianDelay,\r\n        address[] memory guardians\r\n    ) public view returns (address) {\r\n        return\r\n            Create2.computeAddress(\r\n                bytes32(salt),\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        type(ERC1967Proxy).creationCode,\r\n                        abi.encode(\r\n                            address(accountImplementation),\r\n                            abi.encodeCall(\r\n                                TSPAccount.initialize,\r\n                                (\r\n                                    owner,\r\n                                    guardian,\r\n                                    threshold,\r\n                                    guardianDelay,\r\n                                    guardians\r\n                                )\r\n                            )\r\n                        )\r\n                    )\r\n                )\r\n            );\r\n    }\r\n}\r\n"
    },
    "contracts/samples/TSPAccountV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\n/* solhint-disable avoid-low-level-calls */\r\n/* solhint-disable no-inline-assembly */\r\n/* solhint-disable reason-string */\r\n\r\nimport \"./TSPAccount.sol\";\r\n\r\n/**\r\n * minimal account.\r\n *  this is sample minimal account.\r\n *  has execute, eth handling methods\r\n *  has a single signer that can send requests through the entryPoint.\r\n */\r\ncontract TSPAccountV2 is TSPAccount {\r\n    constructor(IEntryPoint anEntryPoint) TSPAccount(anEntryPoint) {}\r\n\r\n    function getVersion() public pure override returns (uint) {\r\n        return 2;\r\n    }\r\n}\r\n"
    },
    "contracts/samples/VerifyingPaymaster.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\n/* solhint-disable reason-string */\r\n/* solhint-disable no-inline-assembly */\r\n\r\nimport \"../core/BasePaymaster.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\n/**\r\n * A sample paymaster that uses external service to decide whether to pay for the UserOp.\r\n * The paymaster trusts an external signer to sign the transaction.\r\n * The calling user must pass the UserOp to that external signer first, which performs\r\n * whatever off-chain verification before signing the UserOp.\r\n * Note that this signature is NOT a replacement for the account-specific signature:\r\n * - the paymaster checks a signature to agree to PAY for GAS.\r\n * - the account checks a signature to prove identity and account ownership.\r\n */\r\ncontract VerifyingPaymaster is BasePaymaster {\r\n\r\n    using ECDSA for bytes32;\r\n    using UserOperationLib for UserOperation;\r\n\r\n    address public immutable verifyingSigner;\r\n\r\n    uint256 private constant VALID_TIMESTAMP_OFFSET = 20;\r\n\r\n    uint256 private constant SIGNATURE_OFFSET = 84;\r\n\r\n    constructor(IEntryPoint _entryPoint, address _verifyingSigner) BasePaymaster(_entryPoint) {\r\n        verifyingSigner = _verifyingSigner;\r\n    }\r\n\r\n    mapping(address => uint256) public senderNonce;\r\n\r\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\r\n        // lighter signature scheme. must match UserOp.ts#packUserOp\r\n        bytes calldata pnd = userOp.paymasterAndData;\r\n        // copy directly the userOp from calldata up to (but not including) the paymasterAndData.\r\n        // this encoding depends on the ABI encoding of calldata, but is much lighter to copy\r\n        // than referencing each field separately.\r\n        assembly {\r\n            let ofs := userOp\r\n            let len := sub(sub(pnd.offset, ofs), 32)\r\n            ret := mload(0x40)\r\n            mstore(0x40, add(ret, add(len, 32)))\r\n            mstore(ret, len)\r\n            calldatacopy(add(ret, 32), ofs, len)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * return the hash we're going to sign off-chain (and validate on-chain)\r\n     * this method is called by the off-chain service, to sign the request.\r\n     * it is called on-chain from the validatePaymasterUserOp, to validate the signature.\r\n     * note that this signature covers all fields of the UserOperation, except the \"paymasterAndData\",\r\n     * which will carry the signature itself.\r\n     */\r\n    function getHash(UserOperation calldata userOp, uint48 validUntil, uint48 validAfter)\r\n    public view returns (bytes32) {\r\n        //can't use userOp.hash(), since it contains also the paymasterAndData itself.\r\n\r\n        return keccak256(abi.encode(\r\n                pack(userOp),\r\n                block.chainid,\r\n                address(this),\r\n                senderNonce[userOp.getSender()],\r\n                validUntil,\r\n                validAfter\r\n            ));\r\n    }\r\n\r\n    /**\r\n     * verify our external signer signed this request.\r\n     * the \"paymasterAndData\" is expected to be the paymaster and a signature over the entire request params\r\n     * paymasterAndData[:20] : address(this)\r\n     * paymasterAndData[20:84] : abi.encode(validUntil, validAfter)\r\n     * paymasterAndData[84:] : signature\r\n     */\r\n    function _validatePaymasterUserOp(UserOperation calldata userOp, bytes32 /*userOpHash*/, uint256 requiredPreFund)\r\n    internal override returns (bytes memory context, uint256 validationData) {\r\n        (requiredPreFund);\r\n\r\n        (uint48 validUntil, uint48 validAfter, bytes calldata signature) = parsePaymasterAndData(userOp.paymasterAndData);\r\n        //ECDSA library supports both 64 and 65-byte long signatures.\r\n        // we only \"require\" it here so that the revert reason on invalid signature will be of \"VerifyingPaymaster\", and not \"ECDSA\"\r\n        require(signature.length == 64 || signature.length == 65, \"VerifyingPaymaster: invalid signature length in paymasterAndData\");\r\n        bytes32 hash = ECDSA.toEthSignedMessageHash(getHash(userOp, validUntil, validAfter));\r\n        senderNonce[userOp.getSender()]++;\r\n\r\n        //don't revert on signature failure: return SIG_VALIDATION_FAILED\r\n        if (verifyingSigner != ECDSA.recover(hash, signature)) {\r\n            return (\"\",_packValidationData(true,validUntil,validAfter));\r\n        }\r\n\r\n        //no need for other on-chain validation: entire UserOp should have been checked\r\n        // by the external service prior to signing it.\r\n        return (\"\",_packValidationData(false,validUntil,validAfter));\r\n    }\r\n\r\n    function parsePaymasterAndData(bytes calldata paymasterAndData) public pure returns(uint48 validUntil, uint48 validAfter, bytes calldata signature) {\r\n        (validUntil, validAfter) = abi.decode(paymasterAndData[VALID_TIMESTAMP_OFFSET:SIGNATURE_OFFSET],(uint48, uint48));\r\n        signature = paymasterAndData[SIGNATURE_OFFSET:];\r\n    }\r\n}\r\n"
    },
    "contracts/test/BrokenBlsAccount.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\nimport \"@openzeppelin/contracts/utils/Create2.sol\";\r\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\r\n\r\nimport \"../samples/SimpleAccount.sol\";\r\nimport \"../samples/bls/IBLSAccount.sol\";\r\n\r\n/**\r\n * for testing: a BLS account that fails to return its public-key (completely ignores its publickey)\r\n * this is a copy of the normal bls account, but it returns a public-key unrelated to the one it is constructed with.\r\n */\r\ncontract BrokenBLSAccount is SimpleAccount, IBLSAccount {\r\n    address public immutable aggregator;\r\n\r\n    // The constructor is used only for the \"implementation\" and only sets immutable values.\r\n    // Mutable values slots for proxy accounts are set by the 'initialize' function.\r\n    constructor(IEntryPoint anEntryPoint, address anAggregator) SimpleAccount(anEntryPoint)  {\r\n        aggregator = anAggregator;\r\n    }\r\n\r\n    function initialize(uint256[4] memory aPublicKey) public virtual initializer {\r\n        (aPublicKey);\r\n        super._initialize(address(0));\r\n    }\r\n\r\n    function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash)\r\n    internal override view returns (uint256 validationData) {\r\n\r\n        (userOp, userOpHash);\r\n        return _packValidationData(ValidationData(aggregator, 0,0));\r\n    }\r\n\r\n    function getBlsPublicKey() external override pure returns (uint256[4] memory) {\r\n        uint256[4] memory pubkey;\r\n        return pubkey;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Based n SimpleAccountFactory\r\n * can't be a subclass, since both constructor and createAccount depend on the\r\n * actual wallet contract constructor and initializer\r\n */\r\ncontract BrokenBLSAccountFactory {\r\n    BrokenBLSAccount public immutable accountImplementation;\r\n\r\n    constructor(IEntryPoint entryPoint, address aggregator){\r\n        accountImplementation = new BrokenBLSAccount(entryPoint, aggregator);\r\n    }\r\n\r\n    /**\r\n     * create an account, and return its address.\r\n     * returns the address even if the account is already deployed.\r\n     * Note that during UserOperation execution, this method is called only if the account is not deployed.\r\n     * This method returns an existing account address so that entryPoint.getSenderAddress() would work even after account creation\r\n     * Also note that out BLSSignatureAggregator requires that the public-key is the last parameter\r\n     */\r\n    function createAccount(uint salt, uint256[4] memory aPublicKey) public returns (BrokenBLSAccount) {\r\n\r\n        address addr = getAddress(salt, aPublicKey);\r\n        uint codeSize = addr.code.length;\r\n        if (codeSize > 0) {\r\n            return BrokenBLSAccount(payable(addr));\r\n        }\r\n        return BrokenBLSAccount(payable(new ERC1967Proxy{salt : bytes32(salt)}(\r\n                address(accountImplementation),\r\n                abi.encodeCall(BrokenBLSAccount.initialize, aPublicKey)\r\n            )));\r\n    }\r\n\r\n    /**\r\n     * calculate the counterfactual address of this account as it would be returned by createAccount()\r\n     */\r\n    function getAddress(uint salt, uint256[4] memory aPublicKey) public view returns (address) {\r\n        return Create2.computeAddress(bytes32(salt), keccak256(abi.encodePacked(\r\n                type(ERC1967Proxy).creationCode,\r\n                abi.encode(\r\n                    address(accountImplementation),\r\n                    abi.encodeCall(BrokenBLSAccount.initialize, (aPublicKey))\r\n                )\r\n            )));\r\n    }\r\n}\r\n"
    },
    "contracts/test/MaliciousAccount.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\nimport \"../interfaces/IAccount.sol\";\r\nimport \"../interfaces/IEntryPoint.sol\";\r\nimport \"../core/EntryPoint.sol\";\r\n\r\ncontract MaliciousAccount is IAccount {\r\n    IEntryPoint private ep;\r\n    constructor(IEntryPoint _ep) payable {\r\n        ep = _ep;\r\n    }\r\n    function validateUserOp(UserOperation calldata userOp, bytes32, uint256 missingAccountFunds)\r\n    external returns (uint256 validationData) {\r\n        ep.depositTo{value : missingAccountFunds}(address(this));\r\n        // Now calculate basefee per EntryPoint.getUserOpGasPrice() and compare it to the basefe we pass off-chain in the signature\r\n        uint256 externalBaseFee = abi.decode(userOp.signature, (uint256));\r\n        uint256 requiredGas = userOp.callGasLimit + userOp.verificationGasLimit + userOp.preVerificationGas;\r\n        uint256 gasPrice = missingAccountFunds / requiredGas;\r\n        uint256 basefee = gasPrice - userOp.maxPriorityFeePerGas;\r\n        require (basefee == externalBaseFee, \"Revert after first validation\");\r\n        return 0;\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestAggregatedAccount.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\nimport \"../samples/SimpleAccount.sol\";\r\n\r\n/**\r\n * test aggregated-signature account.\r\n * works only with TestAggregatedSignature, which doesn't really check signature, but nonce sum\r\n * a true aggregated account should expose data (e.g. its public key) to the aggregator.\r\n */\r\ncontract TestAggregatedAccount is SimpleAccount {\r\n    address public immutable aggregator;\r\n\r\n    // The constructor is used only for the \"implementation\" and only sets immutable values.\r\n    // Mutable value slots for proxy accounts are set by the 'initialize' function.\r\n    constructor(IEntryPoint anEntryPoint, address anAggregator) SimpleAccount(anEntryPoint) {\r\n        aggregator = anAggregator;\r\n    }\r\n\r\n    /// @inheritdoc SimpleAccount\r\n    function initialize(address) public virtual override initializer {\r\n        super._initialize(address(0));\r\n    }\r\n\r\n    function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash)\r\n    internal override view returns (uint256 validationData) {\r\n        (userOp, userOpHash);\r\n        return _packValidationData(ValidationData(aggregator, 0, 0));\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestAggregatedAccountFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\nimport \"@openzeppelin/contracts/utils/Create2.sol\";\r\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\r\n\r\nimport \"./TestAggregatedAccount.sol\";\r\n\r\n/**\r\n * Based on SimpleAccountFactory.\r\n * Cannot be a subclass since both constructor and createAccount depend on the\r\n * constructor and initializer of the actual account contract.\r\n */\r\ncontract TestAggregatedAccountFactory {\r\n    TestAggregatedAccount public immutable accountImplementation;\r\n\r\n    constructor(IEntryPoint anEntryPoint, address anAggregator){\r\n        accountImplementation = new TestAggregatedAccount(anEntryPoint, anAggregator);\r\n    }\r\n\r\n    /**\r\n     * create an account, and return its address.\r\n     * returns the address even if the account is already deployed.\r\n     * Note that during UserOperation execution, this method is called only if the account is not deployed.\r\n     * This method returns an existing account address so that entryPoint.getSenderAddress() would work even after account creation\r\n     */\r\n    function createAccount(address owner,uint256 salt) public returns (TestAggregatedAccount ret) {\r\n        address addr = getAddress(owner, salt);\r\n        uint codeSize = addr.code.length;\r\n        if (codeSize > 0) {\r\n            return TestAggregatedAccount(payable(addr));\r\n        }\r\n        ret = TestAggregatedAccount(payable(new ERC1967Proxy{salt : bytes32(salt)}(\r\n                address(accountImplementation),\r\n                abi.encodeCall(TestAggregatedAccount.initialize, (owner))\r\n            )));\r\n    }\r\n\r\n    /**\r\n     * calculate the counterfactual address of this account as it would be returned by createAccount()\r\n     */\r\n    function getAddress(address owner,uint256 salt) public view returns (address) {\r\n        return Create2.computeAddress(bytes32(salt), keccak256(abi.encodePacked(\r\n                type(ERC1967Proxy).creationCode,\r\n                abi.encode(\r\n                    address(accountImplementation),\r\n                    abi.encodeCall(TestAggregatedAccount.initialize, (owner))\r\n                )\r\n            )));\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestExpirePaymaster.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity ^0.8.12;\r\n\r\nimport \"../core/BasePaymaster.sol\";\r\n\r\n/**\r\n * test expiry mechanism: paymasterData encodes the \"validUntil\" and validAfter\" times\r\n */\r\ncontract TestExpirePaymaster is BasePaymaster {\r\n    // solhint-disable no-empty-blocks\r\n    constructor(IEntryPoint _entryPoint) BasePaymaster(_entryPoint)\r\n    {}\r\n\r\n    function _validatePaymasterUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 maxCost)\r\n    internal virtual override view\r\n    returns (bytes memory context, uint256 validationData) {\r\n        (userOp, userOpHash, maxCost);\r\n        (uint48 validAfter, uint48 validUntil) = abi.decode(userOp.paymasterAndData[20 :], (uint48, uint48));\r\n        validationData = _packValidationData(false, validUntil, validAfter);\r\n        context = \"\";\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestExpiryAccount.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity ^0.8.12;\r\n\r\nimport \"../samples/SimpleAccount.sol\";\r\n\r\n/**\r\n * A test account, for testing expiry.\r\n * add \"temporary\" owners, each with a time range (since..till) times for each.\r\n * NOTE: this is not a full \"session key\" implementation: a real session key should probably limit\r\n * other things, like target contracts and methods to be called.\r\n * also, the \"since\" value is not really useful, only for testing the entrypoint.\r\n */\r\ncontract TestExpiryAccount is SimpleAccount {\r\n    using ECDSA for bytes32;\r\n\r\n    mapping(address => uint48) public ownerAfter;\r\n    mapping(address => uint48) public ownerUntil;\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    constructor(IEntryPoint anEntryPoint) SimpleAccount(anEntryPoint) {}\r\n\r\n    function initialize(address anOwner) public virtual override initializer {\r\n        super._initialize(anOwner);\r\n        addTemporaryOwner(anOwner, 0, type(uint48).max);\r\n    }\r\n\r\n    // As this is a test contract, no need for proxy, so no need to disable init\r\n    // solhint-disable-next-line no-empty-blocks\r\n    function _disableInitializers() internal override {}\r\n\r\n    function addTemporaryOwner(address owner, uint48 _after, uint48 _until) public onlyOwner {\r\n        require(_until > _after, \"wrong until/after\");\r\n        ownerAfter[owner] = _after;\r\n        ownerUntil[owner] = _until;\r\n    }\r\n\r\n    /// implement template method of BaseAccount\r\n    function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash)\r\n    internal override view returns (uint256 validationData) {\r\n        bytes32 hash = userOpHash.toEthSignedMessageHash();\r\n        address signer = hash.recover(userOp.signature);\r\n        uint48 _until = ownerUntil[signer];\r\n        uint48 _after = ownerAfter[signer];\r\n\r\n        //we have \"until\" value for all valid owners. so zero means \"invalid signature\"\r\n        bool sigFailed = _until == 0;\r\n        return _packValidationData(sigFailed, _until, _after);\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestHelpers.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\nimport \"../core/Helpers.sol\";\r\n\r\ncontract TestHelpers {\r\n\r\n    function parseValidationData(uint validationData) public pure returns (ValidationData memory) {\r\n        return _parseValidationData(validationData);\r\n    }\r\n\r\n    function intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) public pure returns (ValidationData memory) {\r\n        return _intersectTimeRange(validationData, paymasterValidationData);\r\n    }\r\n\r\n    function packValidationDataStruct(ValidationData memory data) public pure returns (uint256) {\r\n        return _packValidationData(data);\r\n    }\r\n\r\n    function packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) public pure returns (uint256) {\r\n        return _packValidationData(sigFailed, validUntil, validAfter);\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestPaymasterAcceptAll.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity ^0.8.12;\r\n\r\nimport \"../core/BasePaymaster.sol\";\r\n\r\n/**\r\n * test paymaster, that pays for everything, without any check.\r\n */\r\ncontract TestPaymasterAcceptAll is BasePaymaster {\r\n\r\n    constructor(IEntryPoint _entryPoint) BasePaymaster(_entryPoint) {\r\n        // to support \"deterministic address\" factory\r\n        // solhint-disable avoid-tx-origin\r\n        if (tx.origin != msg.sender) {\r\n            _transferOwnership(tx.origin);\r\n        }\r\n\r\n    }\r\n\r\n    function _validatePaymasterUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 maxCost)\r\n    internal virtual override view\r\n    returns (bytes memory context, uint256 validationData) {\r\n        (userOp, userOpHash, maxCost);\r\n        return (\"\", maxCost == 12345 ? 1 : 0);\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestRevertAccount.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity ^0.8.12;\r\n/* solhint-disable no-inline-assembly */\r\n\r\nimport \"../samples/SimpleAccount.sol\";\r\ncontract TestRevertAccount is IAccount {\r\n    IEntryPoint private ep;\r\n    constructor(IEntryPoint _ep) payable {\r\n        ep = _ep;\r\n    }\r\n\r\n    function validateUserOp(UserOperation calldata, bytes32, uint256 missingAccountFunds)\r\n    external override returns (uint256 validationData) {\r\n        ep.depositTo{value : missingAccountFunds}(address(this));\r\n        return 0;\r\n    }\r\n\r\n    function revertLong(uint256 length) public pure{\r\n        assembly {\r\n            revert(0, length)\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestSignatureAggregator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\n/* solhint-disable reason-string */\r\n\r\nimport \"../interfaces/IAggregator.sol\";\r\nimport \"../interfaces/IEntryPoint.sol\";\r\nimport \"../samples/SimpleAccount.sol\";\r\n\r\n/**\r\n * test signature aggregator.\r\n * the aggregated signature is the SUM of the nonce fields..\r\n */\r\ncontract TestSignatureAggregator is IAggregator {\r\n\r\n    /// @inheritdoc IAggregator\r\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external pure override {\r\n        uint sum = 0;\r\n        for (uint i = 0; i < userOps.length; i++) {\r\n            uint nonce = userOps[i].nonce;\r\n            sum += nonce;\r\n        }\r\n        require(signature.length == 32, \"TestSignatureValidator: sig must be uint\");\r\n        (uint sig) = abi.decode(signature, (uint));\r\n        require(sig == sum, \"TestSignatureValidator: aggregated signature mismatch (nonce sum)\");\r\n    }\r\n\r\n    /// @inheritdoc IAggregator\r\n    function validateUserOpSignature(UserOperation calldata)\r\n    external pure returns (bytes memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * dummy test aggregator: sum all nonce values of UserOps.\r\n     */\r\n    function aggregateSignatures(UserOperation[] calldata userOps) external pure returns (bytes memory aggregatedSignature) {\r\n        uint sum = 0;\r\n        for (uint i = 0; i < userOps.length; i++) {\r\n            sum += userOps[i].nonce;\r\n        }\r\n        return abi.encode(sum);\r\n    }\r\n\r\n    /**\r\n     * Calls the 'addStake' method of the EntryPoint. Forwards the entire msg.value to this call.\r\n     * @param entryPoint - the EntryPoint to send the stake to.\r\n     * @param delay - the new lock duration before the deposit can be withdrawn.\r\n     */\r\n    function addStake(IEntryPoint entryPoint, uint32 delay) external payable {\r\n        entryPoint.addStake{value: msg.value}(delay);\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestUtil.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.12;\r\n\r\nimport \"../interfaces/UserOperation.sol\";\r\n\r\ncontract TestUtil {\r\n    using UserOperationLib for UserOperation;\r\n\r\n    function packUserOp(UserOperation calldata op) external pure returns (bytes memory){\r\n        return op.pack();\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/test/TestWarmColdAccount.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity ^0.8.12;\r\n/* solhint-disable no-inline-assembly */\r\n\r\nimport \"../interfaces/IEntryPoint.sol\";\r\nimport \"../interfaces/IAccount.sol\";\r\n\r\n// Using eip-2929 (https://eips.ethereum.org/EIPS/eip-2929) warm/cold storage access gas costs to detect simulation vs execution\r\n// COLD_ACCOUNT_ACCESS_COST == 2600, COLD_SLOAD_COST == 2100, WARM_STORAGE_READ_COST == 100\r\ncontract TestWarmColdAccount is IAccount {\r\n    IEntryPoint private ep;\r\n    uint public state = 1;\r\n    constructor(IEntryPoint _ep) payable {\r\n        ep = _ep;\r\n    }\r\n\r\n    function validateUserOp(UserOperation calldata userOp, bytes32, uint256 missingAccountFunds)\r\n    external override returns (uint256 validationData) {\r\n        ep.depositTo{value : missingAccountFunds}(address(this));\r\n        if (userOp.nonce == 1) {\r\n            // can only succeed if storage is already warm\r\n            this.touchStorage{gas: 1000}();\r\n        } else if (userOp.nonce == 2) {\r\n            address paymaster = address(bytes20(userOp.paymasterAndData[: 20]));\r\n            // can only succeed if storage is already warm\r\n            this.touchPaymaster{gas: 1000}(paymaster);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function touchStorage() public view returns (uint256) {\r\n        return state;\r\n    }\r\n\r\n    function touchPaymaster(address paymaster) public view returns (uint256) {\r\n        return paymaster.code.length;\r\n    }\r\n}\r\n"
    },
    "contracts/utils/Exec.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.5 <0.9.0;\r\n\r\n// solhint-disable no-inline-assembly\r\n\r\n/**\r\n * Utility functions helpful when making different kinds of contract calls in Solidity.\r\n */\r\nlibrary Exec {\r\n\r\n    function call(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        uint256 txGas\r\n    ) internal returns (bool success) {\r\n        assembly {\r\n            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\r\n        }\r\n    }\r\n\r\n    function staticcall(\r\n        address to,\r\n        bytes memory data,\r\n        uint256 txGas\r\n    ) internal view returns (bool success) {\r\n        assembly {\r\n            success := staticcall(txGas, to, add(data, 0x20), mload(data), 0, 0)\r\n        }\r\n    }\r\n\r\n    function delegateCall(\r\n        address to,\r\n        bytes memory data,\r\n        uint256 txGas\r\n    ) internal returns (bool success) {\r\n        assembly {\r\n            success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\r\n        }\r\n    }\r\n\r\n    // get returned data from last call or calldelegate\r\n    function getReturnData(uint256 maxLen) internal pure returns (bytes memory returnData) {\r\n        assembly {\r\n            let len := returndatasize()\r\n            if gt(len, maxLen) {\r\n                len := maxLen\r\n            }\r\n            let ptr := mload(0x40)\r\n            mstore(0x40, add(ptr, add(len, 0x20)))\r\n            mstore(ptr, len)\r\n            returndatacopy(add(ptr, 0x20), 0, len)\r\n            returnData := ptr\r\n        }\r\n    }\r\n\r\n    // revert with explicit byte array (probably reverted info from call)\r\n    function revertWithData(bytes memory returnData) internal pure {\r\n        assembly {\r\n            revert(add(returnData, 32), mload(returnData))\r\n        }\r\n    }\r\n\r\n    function callAndRevert(address to, bytes memory data, uint256 maxLen) internal {\r\n        bool success = call(to,0,data,gasleft());\r\n        if (!success) {\r\n            revertWithData(getReturnData(maxLen));\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}